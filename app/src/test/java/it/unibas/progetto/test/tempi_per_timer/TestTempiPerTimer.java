package it.unibas.progetto.test.tempi_per_timer;

import org.junit.Assert;
import org.junit.Test;
import org.ros.message.Time;

import java.util.ArrayList;

import geometry_msgs.Point;
import geometry_msgs.Pose;
import geometry_msgs.PoseWithCovariance;
import geometry_msgs.Quaternion;
import geometry_msgs.Twist;
import geometry_msgs.TwistWithCovariance;
import geometry_msgs.Vector3;
import it.unibas.progetto.modello.utilita.Movimento;
import it.unibas.progetto.modello.utilita.TempiPerTimer;
import it.unibas.progetto.test.tempi_per_timer.implementazioni_messaggi.HeaderT;
import it.unibas.progetto.test.tempi_per_timer.implementazioni_messaggi.OdometriaT;
import it.unibas.progetto.test.tempi_per_timer.implementazioni_messaggi.PointT;
import it.unibas.progetto.test.tempi_per_timer.implementazioni_messaggi.PoseT;
import it.unibas.progetto.test.tempi_per_timer.implementazioni_messaggi.PoseWithCovarianceT;
import it.unibas.progetto.test.tempi_per_timer.implementazioni_messaggi.QuaternionT;
import it.unibas.progetto.test.tempi_per_timer.implementazioni_messaggi.TwistT;
import it.unibas.progetto.test.tempi_per_timer.implementazioni_messaggi.TwistWithCovarianceT;
import it.unibas.progetto.test.tempi_per_timer.implementazioni_messaggi.Vector3T;
import nav_msgs.Odometry;
import std_msgs.Header;

public class TestTempiPerTimer {
    private TempiPerTimer tempiPerTimer = new TempiPerTimer();
    private double deltaDouble =  0.00000001;
    //VALORE_DA_CONSIDERARE_ZERO = 0.00000015;
    //DELTA_VELOCITA = 0.0001;

    @Test
    public void testLineare1(){
        System.out.println("TEST LINEARE 1: valori tutti in sequenza e perfetti.");
        System.out.println("positivi");
        ArrayList<Odometry> listaP = new ArrayList<>();
        listaP.add(creaOdometriaTLinare(0, 0.0, 0));
        listaP.add(creaOdometriaTLinare(1, 1.0, 4));
        listaP.add(creaOdometriaTLinare(2, 2.0, 5));
        listaP.add(creaOdometriaTLinare(3, 3.0, 6));
        listaP.add(creaOdometriaTLinare(4, 4.0, 6));
        listaP.add(creaOdometriaTLinare(5, 5.0, 6));
        listaP.add(creaOdometriaTLinare(6, 6.1, 6));
        listaP.add(creaOdometriaTLinare(7, 6.2, 6));
        listaP.add(creaOdometriaTLinare(8, 6.3, 6));
        listaP.add(creaOdometriaTLinare(9, 6.4, 6));
        listaP.add(creaOdometriaTLinare(10, 6.5, 6));
        listaP.add(creaOdometriaTLinare(11, 6.6, 6));
        listaP.add(creaOdometriaTLinare(12, 6.7, 6));
        listaP.add(creaOdometriaTLinare(13, 6.8, 6));
        listaP.add(creaOdometriaTLinare(14, 7.0, 5));
        listaP.add(creaOdometriaTLinare(15, 8.0, 0));
        listaP.add(creaOdometriaTLinare(16, 9.0, 0));

        listaP.add(creaOdometriaTLinare(17, 0, 0));
        listaP.add(creaOdometriaTLinare(18, 9, 0));
        listaP.add(creaOdometriaTLinare(19, 9, 0));
        listaP.add(creaOdometriaTLinare(20, 9, 0));
        listaP.add(creaOdometriaTLinare(21, 9, 0));
        assertMovimento(listaP, true, 4, 3, 6, 12,3.6, 3, 1.2);
        System.out.println("negativi");
        ArrayList<Odometry> listaN = new ArrayList<>();
        listaN.add(creaOdometriaTLinare(0, 0.0, 0));
        listaN.add(creaOdometriaTLinare(1, 1.0, -4));
        listaN.add(creaOdometriaTLinare(2, 2.0, -5));
        listaN.add(creaOdometriaTLinare(3, 3.0, -6));
        listaN.add(creaOdometriaTLinare(4, 4.0, -6));
        listaN.add(creaOdometriaTLinare(5, 5.0, -6));
        listaN.add(creaOdometriaTLinare(6, 6.1, -6));
        listaN.add(creaOdometriaTLinare(7, 6.2, -6));
        listaN.add(creaOdometriaTLinare(8, 6.3, -6));
        listaN.add(creaOdometriaTLinare(9, 6.4, -6));
        listaN.add(creaOdometriaTLinare(10, 6.5, -6));
        listaN.add(creaOdometriaTLinare(11, 6.6, -6));
        listaN.add(creaOdometriaTLinare(12, 6.7, -6));
        listaN.add(creaOdometriaTLinare(13, 6.8, -6));
        listaN.add(creaOdometriaTLinare(14, 7.0, -5));
        listaN.add(creaOdometriaTLinare(15, 8.0, 0));
        listaN.add(creaOdometriaTLinare(16, 9.0, 0));

        listaN.add(creaOdometriaTLinare(17, 0.0, 0));
        listaN.add(creaOdometriaTLinare(18, 9.0, 0));
        listaN.add(creaOdometriaTLinare(19, 9.0, 0));
        listaN.add(creaOdometriaTLinare(20, 9.0, 0));
        listaN.add(creaOdometriaTLinare(21, 9.0, 0));
        assertMovimento(listaN, true, 4, 3, 6, 12,3.6, 3, 1.2);
    }

    @Test
    public void testLineare2(){
        System.out.println("TEST LINEARE 2: valori tutti in sequenza e perfetti.");
        System.out.println("positivi");
        ArrayList<Odometry> listaP = new ArrayList<>();
        listaP.add(creaOdometriaTLinare(0, 0.0, 0));
        listaP.add(creaOdometriaTLinare(1, 1.0, 4));
        listaP.add(creaOdometriaTLinare(2, 2.0, 4));
        listaP.add(creaOdometriaTLinare(3, 3.0, 4));
        listaP.add(creaOdometriaTLinare(4, 4.0, 4));
        listaP.add(creaOdometriaTLinare(5, 5.0, 4));
        listaP.add(creaOdometriaTLinare(6, 6.0, 4));
        listaP.add(creaOdometriaTLinare(7, 7.0, 4));
        listaP.add(creaOdometriaTLinare(8, 8.0, 4));
        listaP.add(creaOdometriaTLinare(9, 9.0, 0));
        assertMovimento(listaP, true, 2, 2, 4, 2,2, 1, 1);
        System.out.println("negativi");
        ArrayList<Odometry> listaN = new ArrayList<>();
        listaN.add(creaOdometriaTLinare(0, 0.0, 0));
        listaN.add(creaOdometriaTLinare(1, 1.0, -4));
        listaN.add(creaOdometriaTLinare(2, 2.0, -4));
        listaN.add(creaOdometriaTLinare(3, 3.0, -4));
        listaN.add(creaOdometriaTLinare(4, 4.0, -4));
        listaN.add(creaOdometriaTLinare(5, 5.0, -4));
        listaN.add(creaOdometriaTLinare(6, 6.0, -4));
        listaN.add(creaOdometriaTLinare(7, 7.0, -4));
        listaN.add(creaOdometriaTLinare(8, 8.0, -4));
        listaN.add(creaOdometriaTLinare(9, 9.0, 0));
        assertMovimento(listaN, true, 2, 2, 4, 2,2, 1, 1);
    }

    @Test
    public void testLineare3(){
        System.out.println("TEST LINEARE 3: la fase Ã¨ presente tra valori da scartare. Sequenza sempre corretta.");
        System.out.println("positivi");
        ArrayList<Odometry> listaP = new ArrayList<>();
        listaP.add(creaOdometriaTLinare(0, 0.0, 4));
        listaP.add(creaOdometriaTLinare(1, 1.0, 4));
        listaP.add(creaOdometriaTLinare(2, 2.0, 4));
        listaP.add(creaOdometriaTLinare(3, 3.0, 4));
        listaP.add(creaOdometriaTLinare(4, 4.0, 2));
        listaP.add(creaOdometriaTLinare(5, 5.0, 0));
        listaP.add(creaOdometriaTLinare(6, 6.0, 0));
        listaP.add(creaOdometriaTLinare(7, 7.0, 0));
        //fase
        listaP.add(creaOdometriaTLinare(8, 8.0, 0));
        listaP.add(creaOdometriaTLinare(9, 9.0, 2));
        listaP.add(creaOdometriaTLinare(10, 10.0, 2));
        listaP.add(creaOdometriaTLinare(11, 11.0, 4));
        listaP.add(creaOdometriaTLinare(12, 12.0, 4));
        listaP.add(creaOdometriaTLinare(13, 13.0, 4));

        listaP.add(creaOdometriaTLinare(14, 14.0, 5));
        listaP.add(creaOdometriaTLinare(15, 15.0, 5));
        listaP.add(creaOdometriaTLinare(16, 16.0, 5));
        listaP.add(creaOdometriaTLinare(17, 17.0, 5));
        listaP.add(creaOdometriaTLinare(18, 18.0, 5));
        listaP.add(creaOdometriaTLinare(19, 19.0, 5));
        listaP.add(creaOdometriaTLinare(20, 20.0, 5));

        listaP.add(creaOdometriaTLinare(21, 21.0, 3));
        listaP.add(creaOdometriaTLinare(22, 22.0, 1));
        listaP.add(creaOdometriaTLinare(23, 23.0, 0));
        //fine
        listaP.add(creaOdometriaTLinare(24, 24.0, 2));
        listaP.add(creaOdometriaTLinare(25, 25.0, 2));
        listaP.add(creaOdometriaTLinare(26, 26.0, 2));
        assertMovimento(listaP, true,  7, 4, 5, 18.5,6.5, 6, 3);
        System.out.println("negativi");
        ArrayList<Odometry> listaN = new ArrayList<>();
        listaN.add(creaOdometriaTLinare(0, 0.0, 4));
        listaN.add(creaOdometriaTLinare(1, 1.0, 4));
        listaN.add(creaOdometriaTLinare(2, 2.0, 4));
        listaN.add(creaOdometriaTLinare(3, 3.0, 4));
        listaN.add(creaOdometriaTLinare(4, 4.0, 2));
        listaN.add(creaOdometriaTLinare(5, 5.0, 0));
        listaN.add(creaOdometriaTLinare(6, 6.0, 0));
        listaN.add(creaOdometriaTLinare(7, 7.0, 0));
        //fase
        listaN.add(creaOdometriaTLinare(8, 8.0, 0));
        listaN.add(creaOdometriaTLinare(9, 9.0, -2));
        listaN.add(creaOdometriaTLinare(10, 10.0, -2));
        listaN.add(creaOdometriaTLinare(11, 11.0, -4));
        listaN.add(creaOdometriaTLinare(12, 12.0, -4));
        listaN.add(creaOdometriaTLinare(13, 13.0, -4));
        listaN.add(creaOdometriaTLinare(14, 14.0, -5));
        listaN.add(creaOdometriaTLinare(15, 15.0, -5));
        listaN.add(creaOdometriaTLinare(16, 16.0, -5));
        listaN.add(creaOdometriaTLinare(17, 17.0, -5));
        listaN.add(creaOdometriaTLinare(18, 18.0, -5));
        listaN.add(creaOdometriaTLinare(19, 19.0, -5));
        listaN.add(creaOdometriaTLinare(20, 20.0, -5));
        listaN.add(creaOdometriaTLinare(21, 21.0, -3));
        listaN.add(creaOdometriaTLinare(22, 22.0, -1));
        listaN.add(creaOdometriaTLinare(23, 23.0, -0));
        //fine
        listaN.add(creaOdometriaTLinare(24, 24.0, -2));
        listaN.add(creaOdometriaTLinare(25, 25.0, -2));
        listaN.add(creaOdometriaTLinare(26, 26.0, -2));
        assertMovimento(listaN, true, 7, 4, 5, 18.5,6.5, 6, 3);
    }

    @Test
    public void testLineare4(){
        System.out.println("TEST LINEARE 4: perfetti, ma con valore 0 pari a VALORE_DA_CONSIDERARE_ZERO.");
        System.out.println("positivi");
        ArrayList<Odometry> listaP = new ArrayList<>();
        listaP.add(creaOdometriaTLinare(0, 0.0, -0.00000015));
        listaP.add(creaOdometriaTLinare(1, 1.0, 4));
        listaP.add(creaOdometriaTLinare(2, 2.0, 4));
        listaP.add(creaOdometriaTLinare(3, 3.0, 4));
        listaP.add(creaOdometriaTLinare(4, 4.0, 4));
        listaP.add(creaOdometriaTLinare(5, 5.0, 4));
        listaP.add(creaOdometriaTLinare(6, 6.0, 4));
        listaP.add(creaOdometriaTLinare(7, 7.0, 4));
        listaP.add(creaOdometriaTLinare(8, 8.0, 3));
        listaP.add(creaOdometriaTLinare(9, 9.0, 2));
        listaP.add(creaOdometriaTLinare(10, 10.0, 0.00000015));
        listaP.add(creaOdometriaTLinare(11, 11.0, 0));
        listaP.add(creaOdometriaTLinare(12, 12.0, 0));
        assertMovimento(listaP, true, 2, 4, 4, 2,7, 1, 3);
    }

    @Test
    public void testLineare5(){
        System.out.println("TEST LINEARE 5: valori fase di accelerazione che non sono tutti crescenti.");
        System.out.println("positivi");
        ArrayList<Odometry> listaP = new ArrayList<>();
        listaP.add(creaOdometriaTLinare(0, 0.0, 0));
        listaP.add(creaOdometriaTLinare(1, 1.0, 4));
        listaP.add(creaOdometriaTLinare(2, 2.0, 4));
        listaP.add(creaOdometriaTLinare(3, 3.0, 3));
        listaP.add(creaOdometriaTLinare(4, 4.0, 6));
        listaP.add(creaOdometriaTLinare(5, 5.0, 6));
        listaP.add(creaOdometriaTLinare(6, 6.1, 6));
        listaP.add(creaOdometriaTLinare(7, 6.2, 6));
        listaP.add(creaOdometriaTLinare(8, 6.3, 6));
        listaP.add(creaOdometriaTLinare(9, 6.4, 6));
        listaP.add(creaOdometriaTLinare(10, 6.5, 6));
        listaP.add(creaOdometriaTLinare(11, 6.6, 6));
        listaP.add(creaOdometriaTLinare(12, 6.7, 6));
        listaP.add(creaOdometriaTLinare(13, 6.8, 6));
        listaP.add(creaOdometriaTLinare(14, 7.0, 2));
        listaP.add(creaOdometriaTLinare(15, 8.0, -0.00000015));
        listaP.add(creaOdometriaTLinare(16, 9.0, 0));
        assertMovimento(listaP,true,  5, 3, 6, 14,1.8, 4, 1.2);
        System.out.println("negativi");
        ArrayList<Odometry> listaN = new ArrayList<>();
        listaN.add(creaOdometriaTLinare(0, 0.0, 0));
        listaN.add(creaOdometriaTLinare(1, 1.0, -4));
        listaN.add(creaOdometriaTLinare(2, 2.0, -4));
        listaN.add(creaOdometriaTLinare(3, 3.0, -3));
        listaN.add(creaOdometriaTLinare(4, 4.0, -6));
        listaN.add(creaOdometriaTLinare(5, 5.0, -6));
        listaN.add(creaOdometriaTLinare(6, 6.1, -6));
        listaN.add(creaOdometriaTLinare(7, 6.2, -6));
        listaN.add(creaOdometriaTLinare(8, 6.3, -6));
        listaN.add(creaOdometriaTLinare(9, 6.4, -6));
        listaN.add(creaOdometriaTLinare(10, 6.5, -6));
        listaN.add(creaOdometriaTLinare(11, 6.6, -6));
        listaN.add(creaOdometriaTLinare(12, 6.7, -6));
        listaN.add(creaOdometriaTLinare(13, 6.8, -6));
        listaN.add(creaOdometriaTLinare(14, 7.0, -2));
        listaN.add(creaOdometriaTLinare(15, 8.0, 0));
        listaN.add(creaOdometriaTLinare(16, 9.0, 0));
        assertMovimento(listaN, true, 5, 3, 6, 14,1.8, 4, 1.2);
    }

    @Test
    public void testLineare6(){
        System.out.println("TEST LINEARE 6: test che valuta la giusta media del velocitÃ  di regime.");
        System.out.println("positivi");
        ArrayList<Odometry> listaP = new ArrayList<>();
        listaP.add(creaOdometriaTLinare(0, 0.0, 0));
        listaP.add(creaOdometriaTLinare(1, 1.0, 4));
        listaP.add(creaOdometriaTLinare(2, 2.0, 4));
        listaP.add(creaOdometriaTLinare(3, 3.0, 3));
        listaP.add(creaOdometriaTLinare(4, 4.0, 6));
        listaP.add(creaOdometriaTLinare(5, 5.0, 6.00005));
        listaP.add(creaOdometriaTLinare(6, 6.1, 6.00004));
        listaP.add(creaOdometriaTLinare(7, 6.2, 6.00003));
        listaP.add(creaOdometriaTLinare(8, 6.3, 6.00003));
        listaP.add(creaOdometriaTLinare(9, 6.4, 6.00002));
        listaP.add(creaOdometriaTLinare(10, 6.5, 6.00003));
        listaP.add(creaOdometriaTLinare(11, 6.6, 6.00001));
        listaP.add(creaOdometriaTLinare(12, 6.7, 6.00005));
        listaP.add(creaOdometriaTLinare(13, 6.8, 6.00001));
        listaP.add(creaOdometriaTLinare(14,7.0, 2));
        listaP.add(creaOdometriaTLinare(15, 8.0, -0.00000015));
        listaP.add(creaOdometriaTLinare(16, 9.0, 0));
        assertMovimento(listaP, true,5, 3, 6.00003357, 14.00001678,1.80000336, 4, 1.2);
        System.out.println("negativi");
        ArrayList<Odometry> listaN = new ArrayList<>();
        listaN.add(creaOdometriaTLinare(0, 0.0, 0));
        listaN.add(creaOdometriaTLinare(1, 1.0, -4));
        listaN.add(creaOdometriaTLinare(2, 2.0, -4));
        listaN.add(creaOdometriaTLinare(3, 3.0, -3));
        listaN.add(creaOdometriaTLinare(4, 4.0, -6));
        listaN.add(creaOdometriaTLinare(5, 5.0, -6.00005));
        listaN.add(creaOdometriaTLinare(6, 6.1, -6.00004));
        listaN.add(creaOdometriaTLinare(7, 6.2, -6.00003));
        listaN.add(creaOdometriaTLinare(8, 6.3, -6.00003));
        listaN.add(creaOdometriaTLinare(9, 6.4, -6.00002));
        listaN.add(creaOdometriaTLinare(10, 6.5, -6.00003));
        listaN.add(creaOdometriaTLinare(11, 6.6, -6.00001));
        listaN.add(creaOdometriaTLinare(12, 6.7, -6.00005));
        listaN.add(creaOdometriaTLinare(13, 6.8, -6.00001));
        listaN.add(creaOdometriaTLinare(14, 7.0, -2));
        listaN.add(creaOdometriaTLinare(15, 8.0, -0.00000015));
        listaN.add(creaOdometriaTLinare(16, 9.0, 0));
        assertMovimento(listaN, true, 5, 3, 6.00003357, 14.00001678,1.80000336, 4, 1.2);
    }

    @Test
    public void testLineare7(){
        System.out.println("TEST LINEARE 7: valori 'reali' turtlebot3 avanti.");
        System.out.println("positivi");
        ArrayList<Odometry> listaP = new ArrayList<>();
        listaP.add(creaOdometriaTLinare(100, 4387.8,  0.0000001242354));
        listaP.add(creaOdometriaTLinare(101, 4387.834,  0.026707168528226768));
        listaP.add(creaOdometriaTLinare(102, 4387.867,  0.052640127075291046));
        listaP.add(creaOdometriaTLinare(103, 4387.900000000001,  0.07857345420705204));
        listaP.add(creaOdometriaTLinare(104, 4387.934,  0.1052979667751738));
        listaP.add(creaOdometriaTLinare(105, 4387.967000000001,  0.13123663484583648));
        listaP.add(creaOdometriaTLinare(106, 4388.0,  0.15717554761435434));
        listaP.add(creaOdometriaTLinare(107, 4388.034000000001,  0.18387434303882366));
        listaP.add(creaOdometriaTLinare(108, 4388.067,  0.20975107515795954));
        listaP.add(creaOdometriaTLinare(109, 4388.1,  0.220006746320241));
        //////////////////////////////// FASE  REGIME///////////////////////////////////////////
        listaP.add(creaOdometriaTLinare(110, 4388.134,  0.220006746320241));
        listaP.add(creaOdometriaTLinare(111, 4388.167,  0.220006746320241));
        listaP.add(creaOdometriaTLinare(112, 4388.2,  0.220006746320241));
        listaP.add(creaOdometriaTLinare(113, 4388.234,  0.220006746320241));
        listaP.add(creaOdometriaTLinare(114, 4388.267,  0.220006746320241));
        listaP.add(creaOdometriaTLinare(115, 4388.3,  0.220006746320241));
        listaP.add(creaOdometriaTLinare(140, 4390.0, 0.220006746320241)); //simulo perdita pacchetti
        listaP.add(creaOdometriaTLinare(150, 4392.267, 0.220006746320241));
        listaP.add(creaOdometriaTLinare(151, 4392.3,  0.220006746320241));
        ////////////////////////////////////////////////////////////////////////////////////
        listaP.add(creaOdometriaTLinare(152, 4392.334,  0.220006746320241));
        listaP.add(creaOdometriaTLinare(153, 4392.367,  0.18755820586591257));
        listaP.add(creaOdometriaTLinare(154, 4392.400000000001,  0.15512092003182604));
        listaP.add(creaOdometriaTLinare(155, 4392.434,  0.12170688979512441));
        listaP.add(creaOdometriaTLinare(156, 4392.467000000001, 0.08926185284480823));
        listaP.add(creaOdometriaTLinare(157, 4392.5, 0.056820567338493506));
        listaP.add(creaOdometriaTLinare(158, 4392.534000000001,  0.023405801112164875));
        listaP.add(creaOdometriaTLinare(159, 4392.567,  -0.0000001242354));
        assertMovimento(listaP, true,10, 8, 0.220006746320241, 0.03509938404970979, 0.024726488427823927, 0.3000000000001819, (4392.567-4392.334));
    }

    @Test
    public void testLineare8(){
        System.out.println("TEST LINEARE 8: valori 'reali' turtlebot3 comando avanti 1 metro.");
        System.out.println("positivi");
        ArrayList<Odometry> listaP = new ArrayList<>();
        listaP.add(creaOdometriaTLinare(14695, 490041000000L, 7.512077646655075E-8));
        listaP.add(creaOdometriaTLinare(14696, 490074000000L, 7.512076221160273E-8));
        listaP.add(creaOdometriaTLinare(14697, 490108000000L, 0.026612301892838693));
        listaP.add(creaOdometriaTLinare(14698, 490141000000L, 0.05243969756781309));
        listaP.add(creaOdometriaTLinare(14699, 490174000000L, 0.07826752041364832));
        listaP.add(creaOdometriaTLinare(14700, 490208000000L, 0.104883657218722));
        listaP.add(creaOdometriaTLinare(14701, 490241000000L, 0.13070984166034236));
        listaP.add(creaOdometriaTLinare(14702, 490274000000L, 0.156538250756468));
        listaP.add(creaOdometriaTLinare(14703, 490308000000L, 0.18320787274766628));
        listaP.add(creaOdometriaTLinare(14704, 490341000000L, 0.2091529802323015));
        listaP.add(creaOdometriaTLinare(14705, 490374000000L, 0.22000480206818596));
        listaP.add(creaOdometriaTLinare(14706, 490408000000L, 0.22000444348499876));
        listaP.add(creaOdometriaTLinare(14707, 490441000000L, 0.22000447924340436));
        listaP.add(creaOdometriaTLinare(14708, 490474000000L, 0.22000451133116936));
        listaP.add(creaOdometriaTLinare(14709, 490508000000L, 0.22000454432842947));
        listaP.add(creaOdometriaTLinare(14710, 490541000000L, 0.22000455006880903));
        listaP.add(creaOdometriaTLinare(14711, 490574000000L, 0.22000452806856527));
        listaP.add(creaOdometriaTLinare(14712, 490608000000L, 0.2200045344548041));
        listaP.add(creaOdometriaTLinare(14713, 490641000000L, 0.22000452916371924));
        listaP.add(creaOdometriaTLinare(14714, 490674000000L, 0.22000453845674917));
        listaP.add(creaOdometriaTLinare(14715, 490708000000L, 0.2200045487040531));
        listaP.add(creaOdometriaTLinare(14716, 490741000000L, 0.2200045585231121));
        listaP.add(creaOdometriaTLinare(14717, 490774000000L, 0.2200045676481263));
        listaP.add(creaOdometriaTLinare(14718, 490808000000L, 0.22000457607049514));
        listaP.add(creaOdometriaTLinare(14719, 490841000000L, 0.2200045833989921));
        listaP.add(creaOdometriaTLinare(14720, 490874000000L, 0.2200045902969241));
        listaP.add(creaOdometriaTLinare(14721, 490908000000L, 0.22000459761332494));
        listaP.add(creaOdometriaTLinare(14722, 490941000000L, 0.22000460561863022));
        listaP.add(creaOdometriaTLinare(14723, 490974000000L, 0.22000460201184027));
        listaP.add(creaOdometriaTLinare(14724, 491008000000L, 0.22000461375785957));
        listaP.add(creaOdometriaTLinare(14725, 491041000000L, 0.2200046271455024));
        listaP.add(creaOdometriaTLinare(14726, 491074000000L, 0.22000464224537122));
        listaP.add(creaOdometriaTLinare(14727, 491108000000L, 0.22000465911856706));
        listaP.add(creaOdometriaTLinare(14728, 491141000000L, 0.22000467620123135));
        listaP.add(creaOdometriaTLinare(14729, 491174000000L, 0.22000469352366347));
        listaP.add(creaOdometriaTLinare(14730, 491208000000L, 0.22000471101197808));
        listaP.add(creaOdometriaTLinare(14731, 491241000000L, 0.22000471426841184));
        listaP.add(creaOdometriaTLinare(14732, 491274000000L, 0.2200047276432083));
        listaP.add(creaOdometriaTLinare(14733, 491308000000L, 0.22000474784081137));
        listaP.add(creaOdometriaTLinare(14734, 491341000000L, 0.2200047610512862));
        listaP.add(creaOdometriaTLinare(14735, 491374000000L, 0.22000477022628662));
        listaP.add(creaOdometriaTLinare(14736, 491408000000L, 0.22000476781694425));
        listaP.add(creaOdometriaTLinare(14737, 491441000000L, 0.22000476629508492));
        listaP.add(creaOdometriaTLinare(14738, 491474000000L, 0.22000475245324883));
        listaP.add(creaOdometriaTLinare(14739, 491508000000L, 0.22000475286263663));
        listaP.add(creaOdometriaTLinare(14740, 491541000000L, 0.22000475444636994));
        listaP.add(creaOdometriaTLinare(14741, 491574000000L, 0.22000475700528022));
        listaP.add(creaOdometriaTLinare(14742, 491608000000L, 0.220004760247633));
        listaP.add(creaOdometriaTLinare(14743, 491641000000L, 0.22000476345941));
        listaP.add(creaOdometriaTLinare(14744, 491674000000L, 0.22000476621086015));
        listaP.add(creaOdometriaTLinare(14745, 491708000000L, 0.2200047550024867));
        listaP.add(creaOdometriaTLinare(14746, 491741000000L, 0.2200047557111412));
        listaP.add(creaOdometriaTLinare(14747, 491774000000L, 0.22000475530863425));
        listaP.add(creaOdometriaTLinare(14748, 491808000000L, 0.2200047540043695));
        listaP.add(creaOdometriaTLinare(14749, 491841000000L, 0.22000475234798542));
        listaP.add(creaOdometriaTLinare(14750, 491874000000L, 0.22000475089168375));
        listaP.add(creaOdometriaTLinare(14751, 491908000000L, 0.220004750221031));
        listaP.add(creaOdometriaTLinare(14752, 491941000000L, 0.22000473775825524));
        listaP.add(creaOdometriaTLinare(14753, 491974000000L, 0.22000473997287173));
        listaP.add(creaOdometriaTLinare(14754, 492008000000L, 0.22000474390839636));
        listaP.add(creaOdometriaTLinare(14755, 492041000000L, 0.2200047490759824));
        listaP.add(creaOdometriaTLinare(14756, 492074000000L, 0.2200047550915645));
        listaP.add(creaOdometriaTLinare(14757, 492108000000L, 0.2200047615143481));
        listaP.add(creaOdometriaTLinare(14758, 492141000000L, 0.22000476729513763));
        listaP.add(creaOdometriaTLinare(14759, 492174000000L, 0.2200047589404711));
        listaP.add(creaOdometriaTLinare(14760, 492208000000L, 0.22000476236827038));
        listaP.add(creaOdometriaTLinare(14761, 492241000000L, 0.22000476412886857));
        listaP.add(creaOdometriaTLinare(14762, 492274000000L, 0.22000476448518683));
        listaP.add(creaOdometriaTLinare(14763, 492308000000L, 0.2200047637755682));
        listaP.add(creaOdometriaTLinare(14764, 492341000000L, 0.22000476258534993));
        listaP.add(creaOdometriaTLinare(14765, 492374000000L, 0.22000476148981463));
        listaP.add(creaOdometriaTLinare(14766, 492408000000L, 0.22000474789635335));
        listaP.add(creaOdometriaTLinare(14767, 492441000000L, 0.22000474842584714));
        listaP.add(creaOdometriaTLinare(14768, 492474000000L, 0.2200047500710136));
        listaP.add(creaOdometriaTLinare(14769, 492508000000L, 0.22000475280924178));
        listaP.add(creaOdometriaTLinare(14770, 492541000000L, 0.22000475614426182));
        listaP.add(creaOdometriaTLinare(14771, 492574000000L, 0.22000475966267932));
        listaP.add(creaOdometriaTLinare(14772, 492608000000L, 0.220004762937445));
        listaP.add(creaOdometriaTLinare(14773, 492641000000L, 0.22000475219947266));
        listaP.add(creaOdometriaTLinare(14774, 492674000000L, 0.2200047534959676));
        listaP.add(creaOdometriaTLinare(14775, 492708000000L, 0.2200047536426614));
        listaP.add(creaOdometriaTLinare(14776, 492741000000L, 0.22000475282954973));
        listaP.add(creaOdometriaTLinare(14777, 492774000000L, 0.22000475148445245));
        listaP.add(creaOdometriaTLinare(14778, 492808000000L, 0.22000475012658008));
        listaP.add(creaOdometriaTLinare(14779, 492841000000L, 0.22000474944543177));
        listaP.add(creaOdometriaTLinare(14780, 492874000000L, 0.22000473679620122));
        listaP.add(creaOdometriaTLinare(14781, 492908000000L, 0.2200047388358464));
        listaP.add(creaOdometriaTLinare(14782, 492941000000L, 0.22000474242193455));
        listaP.add(creaOdometriaTLinare(14783, 492974000000L, 0.2200047474164577));
        listaP.add(creaOdometriaTLinare(14784, 493008000000L, 0.22000475358737137));
        listaP.add(creaOdometriaTLinare(14785, 493041000000L, 0.22000475996593472));
        listaP.add(creaOdometriaTLinare(14786, 493073000000L, 0.2200047529552332));
        listaP.add(creaOdometriaTLinare(14787, 493108000000L, 0.2200047583140777));
        listaP.add(creaOdometriaTLinare(14788, 493141000000L, 0.22000476216635237));
        listaP.add(creaOdometriaTLinare(14789, 493174000000L, 0.2200047644794963));
        listaP.add(creaOdometriaTLinare(14790, 493208000000L, 0.22000476532488583));
        listaP.add(creaOdometriaTLinare(14791, 493241000000L, 0.22000476496897012));
        listaP.add(creaOdometriaTLinare(14792, 493274000000L, 0.2200047639572433));
        listaP.add(creaOdometriaTLinare(14793, 493308000000L, 0.22000474972437564));
        listaP.add(creaOdometriaTLinare(14794, 493341000000L, 0.22000474912151868));
        listaP.add(creaOdometriaTLinare(14795, 493374000000L, 0.22000474941328274));
        listaP.add(creaOdometriaTLinare(14796, 493408000000L, 0.22000475085737908));
        listaP.add(creaOdometriaTLinare(14797, 493441000000L, 0.22000475332124028));
        listaP.add(creaOdometriaTLinare(14798, 493474000000L, 0.22000475655426308));
        listaP.add(creaOdometriaTLinare(14800, 493541000000L, 0.22000475046941118));
        listaP.add(creaOdometriaTLinare(14801, 493574000000L, 0.2200047531513455));
        listaP.add(creaOdometriaTLinare(14802, 493608000000L, 0.22000475484582105));
        listaP.add(creaOdometriaTLinare(14803, 493641000000L, 0.22000475532991712));
        listaP.add(creaOdometriaTLinare(14804, 493674000000L, 0.22000475479195156));
        listaP.add(creaOdometriaTLinare(14805, 493708000000L, 0.22000475354903568));
        listaP.add(creaOdometriaTLinare(14806, 493741000000L, 0.22000475220682483));
        listaP.add(creaOdometriaTLinare(14807, 493774000000L, 0.22000473821362196));
        listaP.add(creaOdometriaTLinare(14808, 493808000000L, 0.22000473836824744));
        listaP.add(creaOdometriaTLinare(14809, 493841000000L, 0.22000473995542608));
        listaP.add(creaOdometriaTLinare(14810, 493874000000L, 0.22000474312808943));
        listaP.add(creaOdometriaTLinare(14811, 493908000000L, 0.2200047479418483));
        listaP.add(creaOdometriaTLinare(14812, 493941000000L, 0.22000475374737058));
        listaP.add(creaOdometriaTLinare(14813, 493974000000L, 0.2200047469970593));
        listaP.add(creaOdometriaTLinare(14814, 494008000000L, 0.22000475344991935));
        listaP.add(creaOdometriaTLinare(14815, 494041000000L, 0.22000475896967012));
        listaP.add(creaOdometriaTLinare(14816, 494074000000L, 0.22000476325924487));
        listaP.add(creaOdometriaTLinare(14817, 494108000000L, 0.22000476610124334));
        listaP.add(creaOdometriaTLinare(14818, 494141000000L, 0.22000476731939797));
        listaP.add(creaOdometriaTLinare(14819, 494174000000L, 0.2200047672712255));
        listaP.add(creaOdometriaTLinare(14820, 494208000000L, 0.2200047532639132));
        listaP.add(creaOdometriaTLinare(14821, 494241000000L, 0.22000475215631887));
        listaP.add(creaOdometriaTLinare(14822, 494274000000L, 0.22000475138322917));
        listaP.add(creaOdometriaTLinare(14823, 494308000000L, 0.22000475141760004));
        listaP.add(creaOdometriaTLinare(14824, 494341000000L, 0.22000475253100701));
        listaP.add(creaOdometriaTLinare(14825, 494374000000L, 0.22000475472599193));
        listaP.add(creaOdometriaTLinare(14826, 494408000000L, 0.2200047578916258));
        listaP.add(creaOdometriaTLinare(14827, 494441000000L, 0.2200047483155464));
        listaP.add(creaOdometriaTLinare(14828, 494474000000L, 0.22000475179453274));
        listaP.add(creaOdometriaTLinare(14829, 494508000000L, 0.22000475479833193));
        listaP.add(creaOdometriaTLinare(14830, 494541000000L, 0.22000475675363204));
        listaP.add(creaOdometriaTLinare(14831, 494574000000L, 0.22000475757549917));
        listaP.add(creaOdometriaTLinare(14832, 494608000000L, 0.22000475729450708));
        listaP.add(creaOdometriaTLinare(14833, 494641000000L, 0.18766236943820724));
        listaP.add(creaOdometriaTLinare(14834, 494674000000L, 0.1553243422465379));
        listaP.add(creaOdometriaTLinare(14835, 494708000000L, 0.12200403441539018));
        listaP.add(creaOdometriaTLinare(14836, 494741000000L, 0.08966167999665803));
        listaP.add(creaOdometriaTLinare(14837, 494774000000L, 0.05732025934359197));
        listaP.add(creaOdometriaTLinare(14838, 494808000000L, 0.02399923424561779));
        listaP.add(creaOdometriaTLinare(14839, 494841000000L, -8.647716526652014E-7));
        listaP.add(creaOdometriaTLinare(14840, 494874000000L, 7.817203925768805E-8));
        listaP.add(creaOdometriaTLinare(14841, 494908000000L, 5.3880480163076134E-8));
        listaP.add(creaOdometriaTLinare(14842, 494941000000L, 4.9090633001018145E-8));
        listaP.add(creaOdometriaTLinare(14843, 494974000000L, 5.0020395570542955E-8));
        listaP.add(creaOdometriaTLinare(14844, 495008000000L, 5.19638196212839E-8));
        listaP.add(creaOdometriaTLinare(14845, 495041000000L, 5.378756770174081E-8));
        assertMovimento(listaP, true,10, 8, 0.2200047199706261, 0.03498463272319202, 0.024796475164285618, (490374000000L-490074000000L)*1.0E-9D, (494841000000L-494608000000L)*1.0E-9D);
    }

    @Test
    public void testLineare9(){
        System.out.println("TEST LINEARE 9: valori 'reali' turtlebot3 comando vai indietro per 1 metro.");
        System.out.println("negativi");
        ArrayList<Odometry> listaN = new ArrayList<>();
        listaN.add(creaOdometriaTLinare(35596, 1186741000000L, 7.46950562104482E-8));
        listaN.add(creaOdometriaTLinare(35597, 1186774000000L, 7.469504357257417E-8));
        listaN.add(creaOdometriaTLinare(35598, 1186808000000L, -0.03238707591713385));
        listaN.add(creaOdometriaTLinare(35599, 1186841000000L, -0.06382861054855889));
        listaN.add(creaOdometriaTLinare(35600, 1186874000000L, -0.09526839088407835));
        listaN.add(creaOdometriaTLinare(35601, 1186908000000L, -0.12765425622145116));
        listaN.add(creaOdometriaTLinare(35602, 1186941000000L, -0.15765425622145116)); //aggiunto manualmente (perditÃ  pacchetto)
        listaN.add(creaOdometriaTLinare(35603, 1186974000000L, -0.19053363018000327));
        listaN.add(creaOdometriaTLinare(35604, 1187008000000L, -0.2199783347522524));
        listaN.add(creaOdometriaTLinare(35605, 1187041000000L, -0.2199774599875314));
        listaN.add(creaOdometriaTLinare(35606, 1187074000000L, -0.21997729326681542));
        listaN.add(creaOdometriaTLinare(35607, 1187108000000L, -0.21997724589910408));
        listaN.add(creaOdometriaTLinare(35608, 1187141000000L, -0.21997720193125928));
        listaN.add(creaOdometriaTLinare(35609, 1187174000000L, -0.21997715993975941));
        listaN.add(creaOdometriaTLinare(35610, 1187208000000L, -0.2199771184143959));
        listaN.add(creaOdometriaTLinare(35611, 1187241000000L, -0.21997708059969798));
        listaN.add(creaOdometriaTLinare(35612, 1187274000000L, -0.2199770451369005));
        listaN.add(creaOdometriaTLinare(35613, 1187308000000L, -0.21997703540103916));
        listaN.add(creaOdometriaTLinare(35614, 1187341000000L, -0.2199770500211433));
        listaN.add(creaOdometriaTLinare(35615, 1187374000000L, -0.21997706089530206));
        listaN.add(creaOdometriaTLinare(35616, 1187408000000L, -0.21997706998994868));
        listaN.add(creaOdometriaTLinare(35617, 1187441000000L, -0.21997707943634245));
        listaN.add(creaOdometriaTLinare(35618, 1187474000000L, -0.21997708990039455));
        listaN.add(creaOdometriaTLinare(35619, 1187508000000L, -0.21997710152946873));
        listaN.add(creaOdometriaTLinare(35620, 1187541000000L, -0.21997711401496925));
        listaN.add(creaOdometriaTLinare(35621, 1187574000000L, -0.21997712640797706));
        listaN.add(creaOdometriaTLinare(35622, 1187608000000L, -0.21997713874154695));
        listaN.add(creaOdometriaTLinare(35623, 1187641000000L, -0.2199771506826029));
        listaN.add(creaOdometriaTLinare(35624, 1187674000000L, -0.21997716125160796));
        listaN.add(creaOdometriaTLinare(35625, 1187708000000L, -0.21997716950331175));
        listaN.add(creaOdometriaTLinare(35626, 1187741000000L, -0.21997717522338062));
        listaN.add(creaOdometriaTLinare(35627, 1187774000000L, -0.2199771781387349));
        listaN.add(creaOdometriaTLinare(35628, 1187808000000L, -0.21997717786367754));
        listaN.add(creaOdometriaTLinare(35629, 1187841000000L, -0.21997717570704625));
        listaN.add(creaOdometriaTLinare(35630, 1187874000000L, -0.21997717081376517));
        listaN.add(creaOdometriaTLinare(35631, 1187908000000L, -0.219977159743663));
        listaN.add(creaOdometriaTLinare(35632, 1187941000000L, -0.21997715232099332));
        listaN.add(creaOdometriaTLinare(35633, 1187974000000L, -0.2199771439468676));
        listaN.add(creaOdometriaTLinare(35634, 1188008000000L, -0.2199771316833478));
        listaN.add(creaOdometriaTLinare(35635, 1188041000000L, -0.21997712083605234));
        listaN.add(creaOdometriaTLinare(35636, 1188074000000L, -0.21997710995196093));
        listaN.add(creaOdometriaTLinare(35637, 1188108000000L, -0.21997709833508916));
        listaN.add(creaOdometriaTLinare(35638, 1188141000000L, -0.21997708746538153));
        listaN.add(creaOdometriaTLinare(35639, 1188174000000L, -0.2199770767174802));
        listaN.add(creaOdometriaTLinare(35640, 1188208000000L, -0.21997706564250463));
        listaN.add(creaOdometriaTLinare(35641, 1188241000000L, -0.21997705608570922));
        listaN.add(creaOdometriaTLinare(35642, 1188274000000L, -0.21997704787859407));
        listaN.add(creaOdometriaTLinare(35643, 1188308000000L, -0.21997704106506105));
        listaN.add(creaOdometriaTLinare(35644, 1188341000000L, -0.21997703741081615));
        listaN.add(creaOdometriaTLinare(35645, 1188374000000L, -0.21997703671608307));
        listaN.add(creaOdometriaTLinare(35646, 1188408000000L, -0.21997703892004214));
        listaN.add(creaOdometriaTLinare(35647, 1188441000000L, -0.21997704454702902));
        listaN.add(creaOdometriaTLinare(35648, 1188474000000L, -0.2199770528160042));
        listaN.add(creaOdometriaTLinare(35649, 1188508000000L, -0.21997706295734312));
        listaN.add(creaOdometriaTLinare(35650, 1188541000000L, -0.219977074204268));
        listaN.add(creaOdometriaTLinare(35651, 1188574000000L, -0.2199770985476412));
        listaN.add(creaOdometriaTLinare(35652, 1188608000000L, -0.21997710866278725));
        listaN.add(creaOdometriaTLinare(35653, 1188641000000L, -0.21997711697486094));
        listaN.add(creaOdometriaTLinare(35654, 1188674000000L, -0.2199771228159513));
        listaN.add(creaOdometriaTLinare(35655, 1188708000000L, -0.21997712553962492));
        listaN.add(creaOdometriaTLinare(35656, 1188741000000L, -0.2199771257511235));
        listaN.add(creaOdometriaTLinare(35657, 1188774000000L, -0.21997712345850765));
        listaN.add(creaOdometriaTLinare(35658, 1188808000000L, -0.2199771185401478));
        listaN.add(creaOdometriaTLinare(35659, 1188841000000L, -0.2199771126109025));
        listaN.add(creaOdometriaTLinare(35660, 1188874000000L, -0.2199771056723965));
        listaN.add(creaOdometriaTLinare(35661, 1188908000000L, -0.2199770975285664));
        listaN.add(creaOdometriaTLinare(35662, 1188941000000L, -0.2199770897017145));
        listaN.add(creaOdometriaTLinare(35663, 1188974000000L, -0.21997708171279695));
        listaN.add(creaOdometriaTLinare(35664, 1189008000000L, -0.2199770729159055));
        listaN.add(creaOdometriaTLinare(35665, 1189041000000L, -0.21997706456123853));
        listaN.add(creaOdometriaTLinare(35666, 1189074000000L, -0.2199770559841166));
        listaN.add(creaOdometriaTLinare(35667, 1189108000000L, -0.21997704659563563));
        listaN.add(creaOdometriaTLinare(35668, 1189141000000L, -0.21997703795180915));
        listaN.add(creaOdometriaTLinare(35669, 1189174000000L, -0.2199770297894508));
        listaN.add(creaOdometriaTLinare(35670, 1189208000000L, -0.2199770220527942));
        listaN.add(creaOdometriaTLinare(35671, 1189241000000L, -0.21997701661422153));
        listaN.add(creaOdometriaTLinare(35672, 1189274000000L, -0.2199770134496019));
        listaN.add(creaOdometriaTLinare(35673, 1189308000000L, -0.2199770258063043));
        listaN.add(creaOdometriaTLinare(35674, 1189341000000L, -0.21997702856890372));
        listaN.add(creaOdometriaTLinare(35675, 1189374000000L, -0.21997703438761707));
        listaN.add(creaOdometriaTLinare(35676, 1189408000000L, -0.21997704284375705));
        listaN.add(creaOdometriaTLinare(35677, 1189441000000L, -0.2199770535601974));
        listaN.add(creaOdometriaTLinare(35678, 1189474000000L, -0.2199770654962012));
        listaN.add(creaOdometriaTLinare(35679, 1189508000000L, -0.21997707761691337));
        listaN.add(creaOdometriaTLinare(35680, 1189541000000L, -0.2199770889519078));
        listaN.add(creaOdometriaTLinare(35681, 1189574000000L, -0.21997709858254885));
        listaN.add(creaOdometriaTLinare(35682, 1189608000000L, -0.21997710562030726));
        listaN.add(creaOdometriaTLinare(35683, 1189641000000L, -0.21997711002728373));
        listaN.add(creaOdometriaTLinare(35684, 1189674000000L, -0.2199771116006897));
        listaN.add(creaOdometriaTLinare(35685, 1189708000000L, -0.21997711007018575));
        listaN.add(creaOdometriaTLinare(35686, 1189741000000L, -0.21997710671678763));
        listaN.add(creaOdometriaTLinare(35687, 1189774000000L, -0.21997710166967235));
        listaN.add(creaOdometriaTLinare(35688, 1189808000000L, -0.21997709486797645));
        listaN.add(creaOdometriaTLinare(35689, 1189841000000L, -0.21997708793627643));
        listaN.add(creaOdometriaTLinare(35690, 1189874000000L, -0.2199770806365548));
        listaN.add(creaOdometriaTLinare(35691, 1189908000000L, -0.21997707249618625));
        listaN.add(creaOdometriaTLinare(35692, 1189941000000L, -0.21997706480726242));
        listaN.add(creaOdometriaTLinare(35693, 1189974000000L, -0.21997705690859018));
        listaN.add(creaOdometriaTLinare(35694, 1190008000000L, -0.21997704811602595));
        listaN.add(creaOdometriaTLinare(35695, 1190041000000L, -0.21997703975775562));
        listaN.add(creaOdometriaTLinare(35696, 1190074000000L, -0.21997703137978933));
        listaN.add(creaOdometriaTLinare(35697, 1190108000000L, -0.21997703581205613));
        listaN.add(creaOdometriaTLinare(35698, 1190141000000L, -0.21997702862924692));
        listaN.add(creaOdometriaTLinare(35699, 1190174000000L, -0.2199770229150576));
        listaN.add(creaOdometriaTLinare(35700, 1190208000000L, -0.2199770188222875));
        listaN.add(creaOdometriaTLinare(35701, 1190241000000L, -0.21997701792348454));
        listaN.add(creaOdometriaTLinare(35702, 1190274000000L, -0.2199770200269264));
        listaN.add(creaOdometriaTLinare(35703, 1190308000000L, -0.2199770250266342));
        listaN.add(creaOdometriaTLinare(35704, 1190341000000L, -0.2199770331499246));
        listaN.add(creaOdometriaTLinare(35705, 1190374000000L, -0.21997704356703773));
        listaN.add(creaOdometriaTLinare(35706, 1190408000000L, -0.219977055440481));
        listaN.add(creaOdometriaTLinare(35707, 1190441000000L, -0.21997706785156995));
        listaN.add(creaOdometriaTLinare(35708, 1190474000000L, -0.2199770797236776));
        listaN.add(creaOdometriaTLinare(35709, 1190508000000L, -0.21997709001258497));
        listaN.add(creaOdometriaTLinare(35710, 1190541000000L, -0.21997709812133948));
        listaN.add(creaOdometriaTLinare(35711, 1190574000000L, -0.21997710353895658));
        listaN.add(creaOdometriaTLinare(35712, 1190608000000L, -0.21997710573858828));
        listaN.add(creaOdometriaTLinare(35713, 1190641000000L, -0.21997710550017624));
        listaN.add(creaOdometriaTLinare(35714, 1190674000000L, -0.2199771029100908));
        listaN.add(creaOdometriaTLinare(35715, 1190708000000L, -0.21997709790908637));
        listaN.add(creaOdometriaTLinare(35716, 1190741000000L, -0.21997709212192926));
        listaN.add(creaOdometriaTLinare(35717, 1190774000000L, -0.21997708551795656));
        listaN.add(creaOdometriaTLinare(35718, 1190808000000L, -0.21997707784615694));
        listaN.add(creaOdometriaTLinare(35719, 1190841000000L, -0.21997707053690818));
        listaN.add(creaOdometriaTLinare(35720, 1190874000000L, -0.21997706306007841));
        listaN.add(creaOdometriaTLinare(35721, 1190908000000L, -0.21997705474583149));
        listaN.add(creaOdometriaTLinare(35722, 1190941000000L, -0.21997704681531224));
        listaN.add(creaOdometriaTLinare(35723, 1190974000000L, -0.2199770386502524));
        listaN.add(creaOdometriaTLinare(35724, 1191008000000L, -0.21997704285684));
        listaN.add(creaOdometriaTLinare(35725, 1191040000000L, -0.21997703481940023));
        listaN.add(creaOdometriaTLinare(35726, 1191074000000L, -0.21997702747081185));
        listaN.add(creaOdometriaTLinare(35727, 1191108000000L, -0.21997702084181925));
        listaN.add(creaOdometriaTLinare(35728, 1191141000000L, -0.2199770167455236));
        listaN.add(creaOdometriaTLinare(35729, 1191174000000L, -0.21997701516222481));
        listaN.add(creaOdometriaTLinare(35730, 1191208000000L, -0.21997701619495724));
        listaN.add(creaOdometriaTLinare(35731, 1191241000000L, -0.21997702072067266));
        listaN.add(creaOdometriaTLinare(35732, 1191274000000L, -0.21997702819074022));
        listaN.add(creaOdometriaTLinare(35733, 1191308000000L, -0.21997703807713276));
        listaN.add(creaOdometriaTLinare(35734, 1191341000000L, -0.18825668976307652));
        listaN.add(creaOdometriaTLinare(35735, 1191374000000L, -0.1558639468895674));
        listaN.add(creaOdometriaTLinare(35736, 1191408000000L, -0.12254098673407461));
        listaN.add(creaOdometriaTLinare(35737, 1191441000000L, -0.09019871517001851));
        listaN.add(creaOdometriaTLinare(35738, 1191474000000L, -0.05785694553708057));
        listaN.add(creaOdometriaTLinare(35739, 1191499000000L, -0.024535287630786797));
        listaN.add(creaOdometriaTLinare(35740, 1191541000000L, 8.831923823426987E-6));
        listaN.add(creaOdometriaTLinare(35741, 1191574000000L, 1.9338760684923866E-7));
        listaN.add(creaOdometriaTLinare(35742, 1191608000000L, 5.5602597028770446E-8));
        listaN.add(creaOdometriaTLinare(35743, 1191641000000L, 5.0009993590193364E-8));
        listaN.add(creaOdometriaTLinare(35744, 1191674000000L, 5.680057035585479E-8));
        listaN.add(creaOdometriaTLinare(35745, 1191708000000L, 6.479173428282985E-8));
        listaN.add(creaOdometriaTLinare(35746, 1191741000000L, 7.197509469448671E-8));
        listaN.add(creaOdometriaTLinare(35747, 1191774000000L, 7.838263723155802E-8));
        assertMovimento(listaN, true,8, 8, 0.21997708974838834, 0.025984297493327875, 0.02464499938037338, (1187008000000L-1186774000000L)*1.0E-9D, (1191541000000L-1191308000000L)*1.0E-9D);
    }

    @Test
    public void testAngolare1(){
        System.out.println("TEST ANGOLARE 1: solo per verificare il corretto switch all'interno dei metodi.");
        System.out.println("positivi");
        ArrayList<Odometry> listaP = new ArrayList<>();
        listaP.add(creaOdometriaTAngolare(0, 0.0, 0));
        listaP.add(creaOdometriaTAngolare(1, 1.0, 4));
        listaP.add(creaOdometriaTAngolare(2, 2.0, 4));
        listaP.add(creaOdometriaTAngolare(3, 3.0, 4));
        listaP.add(creaOdometriaTAngolare(4, 4.0, 4));
        listaP.add(creaOdometriaTAngolare(5, 5.0, 4));
        listaP.add(creaOdometriaTAngolare(6, 6.0, 4));
        listaP.add(creaOdometriaTAngolare(7, 7.0, 4));
        listaP.add(creaOdometriaTAngolare(8, 8.0, 4));
        listaP.add(creaOdometriaTAngolare(9, 9.0, 0));
        assertMovimento(listaP,  false, 2, 2, 4, 2,2, 1, 1);
        System.out.println("negativi");
        ArrayList<Odometry> listaN = new ArrayList<>();
        listaN.add(creaOdometriaTAngolare(0, 0.0, 0));
        listaN.add(creaOdometriaTAngolare(1, 1.0, -4));
        listaN.add(creaOdometriaTAngolare(2, 2.0, -4));
        listaN.add(creaOdometriaTAngolare(3, 3.0, -4));
        listaN.add(creaOdometriaTAngolare(4, 4.0, -4));
        listaN.add(creaOdometriaTAngolare(5, 5.0, -4));
        listaN.add(creaOdometriaTAngolare(6, 6.0, -4));
        listaN.add(creaOdometriaTAngolare(7, 7.0, -4));
        listaN.add(creaOdometriaTAngolare(8, 8.0, -4));
        listaN.add(creaOdometriaTAngolare(9, 9.0, 0));
        assertMovimento(listaN, false, 2, 2, 4, 2,2, 1, 1);
    }

    @Test
    public void testAngolare2(){
        System.out.println("TEST ANGOLARE 2: valori 'reali' turlebot3 comando gira a sinitra di 90Â°.");
        System.out.println("positivi");
	    ArrayList<Odometry> listaP = new ArrayList<>();
        listaP.add(creaOdometriaTAngolare( 23896 ,796567000000L, .858510632427698E-6));
        listaP.add(creaOdometriaTAngolare( 23897, 796600000000L, 9.85852540707483E-6));
        listaP.add(creaOdometriaTAngolare( 23898, 796634000000L, 0.21986640718494577));
        listaP.add(creaOdometriaTAngolare( 23899, 796667000000L, 0.21989979171035184));
        listaP.add(creaOdometriaTAngolare( 23900, 796700000000L, 0.2198949022544668));
        listaP.add(creaOdometriaTAngolare( 23901, 796734000000L, 0.21989043676091719));
        listaP.add(creaOdometriaTAngolare( 23902, 796767000000L, 0.21988664688615878));
        listaP.add(creaOdometriaTAngolare( 23903, 796800000000L, 0.21988341180809606));
        listaP.add(creaOdometriaTAngolare( 23904, 796834000000L, 0.21988045805178213));
        listaP.add(creaOdometriaTAngolare( 23905, 796867000000L, 0.21987794405751312));
        listaP.add(creaOdometriaTAngolare( 23906, 796900000000L, 0.21987577024420807));
        listaP.add(creaOdometriaTAngolare( 23907, 796934000000L, 0.2198737796456175));
        listaP.add(creaOdometriaTAngolare( 23908, 796967000000L, 0.2198721401438083));
        listaP.add(creaOdometriaTAngolare( 23909, 797000000000L, 0.21987064253074048));
        listaP.add(creaOdometriaTAngolare( 23910, 797034000000L, 0.21986933671342027));
        listaP.add(creaOdometriaTAngolare( 23911, 797067000000L, 0.21986828160467847));
        listaP.add(creaOdometriaTAngolare( 23912, 797100000000L, 0.21986737933199405));
        listaP.add(creaOdometriaTAngolare( 23913, 797134000000L, 0.21986636533239037));
        listaP.add(creaOdometriaTAngolare( 23914, 797167000000L, 0.21986568918951427));
        listaP.add(creaOdometriaTAngolare( 23915, 797200000000L, 0.21986536324402872));
        listaP.add(creaOdometriaTAngolare( 23916, 797234000000L, 0.2198651669462249));
        listaP.add(creaOdometriaTAngolare( 23917, 797267000000L, 0.21986509072246202));
        listaP.add(creaOdometriaTAngolare( 23918, 797300000000L, 0.21986511633415962));
        listaP.add(creaOdometriaTAngolare( 23919, 797334000000L, 0.21986523880546652));
        listaP.add(creaOdometriaTAngolare( 23920, 797367000000L, 0.21986544150215048));
        listaP.add(creaOdometriaTAngolare( 23921, 797400000000L, 0.21986571814863706));
        listaP.add(creaOdometriaTAngolare( 23922, 797434000000L, 0.2198660721545541));
        listaP.add(creaOdometriaTAngolare( 23923, 797467000000L, 0.21986647538429202));
        listaP.add(creaOdometriaTAngolare( 23924, 797500000000L, 0.21986693023000672));
        listaP.add(creaOdometriaTAngolare( 23925, 797534000000L, 0.21986744615978465));
        listaP.add(creaOdometriaTAngolare( 23926, 797567000000L, 0.21986798685615802));
        listaP.add(creaOdometriaTAngolare( 23927, 797600000000L, 0.21986856157702594));
        listaP.add(creaOdometriaTAngolare( 23928, 797634000000L, 0.2198691840164641));
        listaP.add(creaOdometriaTAngolare( 23929, 797667000000L, 0.21986981288733393));
        listaP.add(creaOdometriaTAngolare( 23930, 797700000000L, 0.219870462102522));
        listaP.add(creaOdometriaTAngolare( 23931, 797734000000L, 0.21987114817107423));
        listaP.add(creaOdometriaTAngolare( 23932, 797767000000L, 0.21987182729660668));
        listaP.add(creaOdometriaTAngolare( 23933, 797800000000L, 0.21987251635467464));
        listaP.add(creaOdometriaTAngolare( 23934, 797834000000L, 0.2198732337494662));
        listaP.add(creaOdometriaTAngolare( 23935, 797867000000L, 0.2198739347292202));
        listaP.add(creaOdometriaTAngolare( 23936, 797900000000L, 0.21987463817379332));
        listaP.add(creaOdometriaTAngolare( 23937, 797934000000L, 0.2198753633322501));
        listaP.add(creaOdometriaTAngolare( 23938, 797967000000L, 0.21987606594767678));
        listaP.add(creaOdometriaTAngolare( 23939, 798000000000L, 0.21987676580276783));
        listaP.add(creaOdometriaTAngolare( 23940, 798034000000L, 0.21987732019220133));
        listaP.add(creaOdometriaTAngolare( 23941, 798067000000L, 0.21987786679164714));
        listaP.add(creaOdometriaTAngolare( 23942, 798100000000L, 0.21987840442402462));
        listaP.add(creaOdometriaTAngolare( 23943, 798134000000L, 0.2198789480052851));
        listaP.add(creaOdometriaTAngolare( 23944, 798167000000L, 0.21987946510037712));
        listaP.add(creaOdometriaTAngolare( 23945, 798200000000L, 0.21987997152868183));
        listaP.add(creaOdometriaTAngolare( 23946, 798234000000L, 0.21988048192535264));
        listaP.add(creaOdometriaTAngolare( 23947, 798267000000L, 0.21988096620769923));
        listaP.add(creaOdometriaTAngolare( 23948, 798300000000L, 0.2198814394755361));
        listaP.add(creaOdometriaTAngolare( 23949, 798334000000L, 0.2198819156162029));
        listaP.add(creaOdometriaTAngolare( 23950, 798367000000L, 0.21988236674403108));
        listaP.add(creaOdometriaTAngolare( 23951, 798400000000L, 0.2198828072055126));
        listaP.add(creaOdometriaTAngolare( 23952, 798434000000L, 0.21988325009208853));
        listaP.add(creaOdometriaTAngolare( 23953, 798467000000L, 0.21988366961790576));
        listaP.add(creaOdometriaTAngolare( 23954, 798500000000L, 0.21988407925442127));
        listaP.add(creaOdometriaTAngolare( 23955, 798534000000L, 0.2198844912896827));
        listaP.add(creaOdometriaTAngolare( 23956, 798567000000L, 0.21988488181901086));
        listaP.add(creaOdometriaTAngolare( 23957, 798598000000L, 0.21988526344132633));
        listaP.add(creaOdometriaTAngolare( 23958, 798634000000L, 0.2198856476686987));
        listaP.add(creaOdometriaTAngolare( 23959, 798667000000L, 0.21988601224984367));
        listaP.add(creaOdometriaTAngolare( 23960, 798700000000L, 0.21988636894572855));
        listaP.add(creaOdometriaTAngolare( 23961, 798734000000L, 0.2198867285814982));
        listaP.add(creaOdometriaTAngolare( 23962, 798767000000L, 0.21988707031248925));
        listaP.add(creaOdometriaTAngolare( 23963, 798800000000L, 0.21988740511608856));
        listaP.add(creaOdometriaTAngolare( 23964, 798834000000L, 0.21988774312001436));
        listaP.add(creaOdometriaTAngolare( 23965, 798867000000L, 0.21988806471937725));
        listaP.add(creaOdometriaTAngolare( 23966, 798900000000L, 0.21988838020314533));
        listaP.add(creaOdometriaTAngolare( 23967, 798934000000L, 0.21988869909473951));
        listaP.add(creaOdometriaTAngolare( 23968, 798967000000L, 0.2198890028523614));
        listaP.add(creaOdometriaTAngolare( 23969, 799000000000L, 0.2198893011432675));
        listaP.add(creaOdometriaTAngolare( 23970, 799034000000L, 0.21988960299371224));
        listaP.add(creaOdometriaTAngolare( 23971, 799067000000L, 0.21988989074510137));
        listaP.add(creaOdometriaTAngolare( 23972, 799100000000L, 0.21989017348505152));
        listaP.add(creaOdometriaTAngolare( 23973, 799134000000L, 0.21989045967033508));
        listaP.add(creaOdometriaTAngolare( 23974, 799167000000L, 0.21989073256617972));
        listaP.add(creaOdometriaTAngolare( 23975, 799200000000L, 0.21989100074055895));
        listaP.add(creaOdometriaTAngolare( 23976, 799234000000L, 0.21989127218317414));
        listaP.add(creaOdometriaTAngolare( 23977, 799267000000L, 0.21989153102538395));
        listaP.add(creaOdometriaTAngolare( 23978, 799300000000L, 0.2198917852905855));
        listaP.add(creaOdometriaTAngolare( 23979, 799334000000L, 0.21989204255122696));
        listaP.add(creaOdometriaTAngolare( 23980, 799367000000L, 0.2198922876369815));
        listaP.add(creaOdometriaTAngolare( 23981, 799400000000L, 0.21989252816114196));
        listaP.add(creaOdometriaTAngolare( 23982, 799434000000L, 0.21989277118529427));
        listaP.add(creaOdometriaTAngolare( 23983, 799467000000L, 0.21989300242078688));
        listaP.add(creaOdometriaTAngolare( 23984, 799500000000L, 0.21989322905839975));
        listaP.add(creaOdometriaTAngolare( 23985, 799534000000L, 0.21989345766310486));
        listaP.add(creaOdometriaTAngolare( 23986, 799567000000L, 0.2198936747365894));
        listaP.add(creaOdometriaTAngolare( 23987, 799600000000L, 0.21989388701623278));
        listaP.add(creaOdometriaTAngolare( 23988, 799634000000L, 0.2198941006487027));
        listaP.add(creaOdometriaTAngolare( 23989, 799667000000L, 0.21989430299850632));
        listaP.add(creaOdometriaTAngolare( 23990, 799700000000L, 0.21989450037238623));
        listaP.add(creaOdometriaTAngolare( 23991, 799734000000L, 0.21989469847104975));
        listaP.add(creaOdometriaTAngolare( 23992, 799767000000L, 0.21989488551148337));
        listaP.add(creaOdometriaTAngolare( 23993, 799800000000L, 0.21989506731765604));
        listaP.add(creaOdometriaTAngolare( 23994, 799834000000L, 0.21989524907026797));
        listaP.add(creaOdometriaTAngolare( 23995, 799867000000L, 0.21989541999164935));
        listaP.add(creaOdometriaTAngolare( 23996, 799900000000L, 0.2198955854221286));
        listaP.add(creaOdometriaTAngolare( 23997, 799934000000L, 0.21989575003221135));
        listaP.add(creaOdometriaTAngolare( 23998, 799967000000L, 0.21989590405506504));
        listaP.add(creaOdometriaTAngolare( 23999, 800000000000L, 0.21989605237322135));
        listaP.add(creaOdometriaTAngolare( 24000, 800034000000L, 0.21989619907788463));
        listaP.add(creaOdometriaTAngolare( 24001, 800067000000L, 0.21989633544815834));
        listaP.add(creaOdometriaTAngolare( 24002, 800100000000L, 0.21989646579995933));
        listaP.add(creaOdometriaTAngolare( 24003, 800134000000L, 0.21989659371901538));
        listaP.add(creaOdometriaTAngolare( 24004, 800167000000L, 0.21989671159329796));
        listaP.add(creaOdometriaTAngolare( 24005, 800200000000L, 0.21989682319607184));
        listaP.add(creaOdometriaTAngolare( 24006, 800234000000L, 0.21989693153285597));
        listaP.add(creaOdometriaTAngolare( 24007, 800267000000L, 0.2198970301500946));
        listaP.add(creaOdometriaTAngolare( 24008, 800300000000L, 0.21989712225147748));
        listaP.add(creaOdometriaTAngolare( 24009, 800334000000L, 0.2198972102472587));
        listaP.add(creaOdometriaTAngolare( 24010, 800367000000L, 0.21989728891024451));
        listaP.add(creaOdometriaTAngolare( 24011, 800400000000L, 0.21989736083682257));
        listaP.add(creaOdometriaTAngolare( 24012, 800434000000L, 0.21989742781078364));
        listaP.add(creaOdometriaTAngolare( 24013, 800467000000L, 0.2198974858210672));
        listaP.add(creaOdometriaTAngolare( 24014, 800500000000L, 0.21989753687284405));
        listaP.add(creaOdometriaTAngolare( 24015, 800534000000L, 0.21989758212642432));
        listaP.add(creaOdometriaTAngolare( 24016, 800567000000L, 0.21989761885301798));
        listaP.add(creaOdometriaTAngolare( 24017, 800600000000L, 0.21989764843048384));
        listaP.add(creaOdometriaTAngolare( 24018, 800634000000L, 0.21989767136338775));
        listaP.add(creaOdometriaTAngolare( 24019, 800667000000L, 0.21989768624522876));
        listaP.add(creaOdometriaTAngolare( 24020, 800700000000L, 0.21989769380589608));
        listaP.add(creaOdometriaTAngolare( 24021, 800734000000L, 0.21989769388475414));
        listaP.add(creaOdometriaTAngolare( 24022, 800767000000L, 0.2198976864239073));
        listaP.add(creaOdometriaTAngolare( 24023, 800800000000L, 0.21989767149389952));
        listaP.add(creaOdometriaTAngolare( 24024, 800834000000L, 0.2198976482504308));
        listaP.add(creaOdometriaTAngolare( 24025, 800867000000L, 0.21989761801911378));
        listaP.add(creaOdometriaTAngolare( 24026, 800900000000L, 0.21989758019048927));
        listaP.add(creaOdometriaTAngolare( 24027, 800934000000L, 0.2198975332318995));
        listaP.add(creaOdometriaTAngolare( 24028, 800967000000L, 0.21989747987046904));
        listaP.add(creaOdometriaTAngolare( 24029, 801000000000L, 0.21989741881200783));
        listaP.add(creaOdometriaTAngolare( 24030, 801034000000L, 0.21989734782091522));
        listaP.add(creaOdometriaTAngolare( 24031, 801067000000L, 0.21989727104837856));
        listaP.add(creaOdometriaTAngolare( 24032, 801100000000L, 0.21989718650254983));
        listaP.add(creaOdometriaTAngolare( 24033, 801134000000L, 0.21989709124295584));
        listaP.add(creaOdometriaTAngolare( 24034, 801167000000L, 0.21989699085736433));
        listaP.add(creaOdometriaTAngolare( 24035, 801200000000L, 0.21989688265067045));
        listaP.add(creaOdometriaTAngolare( 24036, 801234000000L, 0.21989676297312818));
        listaP.add(creaOdometriaTAngolare( 24037, 801267000000L, 0.21989663885955876));
        listaP.add(creaOdometriaTAngolare( 24038, 801300000000L, 0.2198965069050576));
        listaP.add(creaOdometriaTAngolare( 24039, 801334000000L, 0.21989636275300542));
        listaP.add(creaOdometriaTAngolare( 24040, 801367000000L, 0.21989621488790492));
        listaP.add(creaOdometriaTAngolare( 24041, 801400000000L, 0.21989605919483554));
        listaP.add(creaOdometriaTAngolare( 24042, 801434000000L, 0.219895890611137));
        listaP.add(creaOdometriaTAngolare( 24043, 801467000000L, 0.21989571906978503));
        listaP.add(creaOdometriaTAngolare( 24044, 801500000000L, 0.21989553975067377));
        listaP.add(creaOdometriaTAngolare( 24045, 801534000000L, 0.2198953468891936));
        listaP.add(creaOdometriaTAngolare( 24046, 801567000000L, 0.21989515185886788));
        listaP.add(creaOdometriaTAngolare( 24047, 801600000000L, 0.21989494913830612));
        listaP.add(creaOdometriaTAngolare( 24048, 801634000000L, 0.21989473227186343));
        listaP.add(creaOdometriaTAngolare( 24049, 801667000000L, 0.21989451406066257));
        listaP.add(creaOdometriaTAngolare( 24050, 801700000000L, 0.21989428828959234));
        listaP.add(creaOdometriaTAngolare( 24051, 801734000000L, 0.21989404782691754));
        listaP.add(creaOdometriaTAngolare( 24052, 801767000000L, 0.21989380687795443));
        listaP.add(creaOdometriaTAngolare( 24053, 801800000000L, 0.21989355854900777));
        listaP.add(creaOdometriaTAngolare( 24054, 801834000000L, 0.2198932950496387));
        listaP.add(creaOdometriaTAngolare( 24055, 801867000000L, 0.21989303196360216));
        listaP.add(creaOdometriaTAngolare( 24056, 801900000000L, 0.2198927617515934));
        listaP.add(creaOdometriaTAngolare( 24057, 801934000000L, 0.219892475972714));
        listaP.add(creaOdometriaTAngolare( 24058, 801967000000L, 0.21989219153710268));
        listaP.add(creaOdometriaTAngolare( 24059, 802000000000L, 0.21989190025243854));
        listaP.add(creaOdometriaTAngolare( 24060, 802034000000L, 0.2198915930971667));
        listaP.add(creaOdometriaTAngolare( 24061, 802067000000L, 0.2198912882626817));
        listaP.add(creaOdometriaTAngolare( 24062, 802100000000L, 0.21989097694763549));
        listaP.add(creaOdometriaTAngolare( 24063, 802134000000L, 0.21989064956843954));
        listaP.add(creaOdometriaTAngolare( 24064, 802167000000L, 0.21989032553474586));
        listaP.add(creaOdometriaTAngolare( 24065, 802200000000L, 0.21988999547187835));
        listaP.add(creaOdometriaTAngolare( 24066, 802234000000L, 0.21988964928113));
        listaP.add(creaOdometriaTAngolare( 24067, 802267000000L, 0.21988930751136226));
        listaP.add(creaOdometriaTAngolare( 24068, 802300000000L, 0.21988896025993357));
        listaP.add(creaOdometriaTAngolare( 24069, 802334000000L, 0.21988859696837995));
        listaP.add(creaOdometriaTAngolare( 24070, 802367000000L, 0.21988823922959277));
        listaP.add(creaOdometriaTAngolare( 24071, 802400000000L, 0.2198878766665648));
        listaP.add(creaOdometriaTAngolare( 24072, 802434000000L, 0.2198874983290494));
        listaP.add(creaOdometriaTAngolare( 24073, 802467000000L, 0.21988712673719793));
        listaP.add(creaOdometriaTAngolare( 24074, 802500000000L, 0.21988675110324496));
        listaP.add(creaOdometriaTAngolare( 24075, 802534000000L, 0.21988636016492494));
        listaP.add(creaOdometriaTAngolare( 24076, 802567000000L, 0.2198859772308686));
        listaP.add(creaOdometriaTAngolare( 24077, 802600000000L, 0.21988559117938988));
        listaP.add(creaOdometriaTAngolare( 24078, 802634000000L, 0.21988519054672562));
        listaP.add(creaOdometriaTAngolare( 24079, 802667000000L, 0.21988479924801893));
        listaP.add(creaOdometriaTAngolare( 24080, 802700000000L, 0.21988440591238492));
        listaP.add(creaOdometriaTAngolare( 24081, 802734000000L, 0.2198839989441889));
        listaP.add(creaOdometriaTAngolare( 24082, 802767000000L, 0.219883602706013));
        listaP.add(creaOdometriaTAngolare( 24083, 802800000000L, 0.2198832056851306));
        listaP.add(creaOdometriaTAngolare( 24084, 802834000000L, 0.21988279629360571));
        listaP.add(creaOdometriaTAngolare( 24085, 802867000000L, 0.2198823990994058));
        listaP.add(creaOdometriaTAngolare( 24086, 802900000000L, 0.21988200255951154));
        listaP.add(creaOdometriaTAngolare( 24087, 802934000000L, 0.21988159523343775));
        listaP.add(creaOdometriaTAngolare( 24088, 802967000000L, 0.21988120163134414));
        listaP.add(creaOdometriaTAngolare( 24089, 803000000000L, 0.21988081031238568));
        listaP.add(creaOdometriaTAngolare( 24090, 803034000000L, 0.21988041013400553));
        listaP.add(creaOdometriaTAngolare( 24091, 803067000000L, 0.2198800252523945));
        listaP.add(creaOdometriaTAngolare( 24092, 803100000000L, 0.21987964447150785));
        listaP.add(creaOdometriaTAngolare( 24093, 803134000000L, 0.21987925711790404));
        listaP.add(creaOdometriaTAngolare( 24094, 803167000000L, 0.21987888665296954));
        listaP.add(creaOdometriaTAngolare( 24095, 803199000000L, 0.21987852228818697));
        listaP.add(creaOdometriaTAngolare( 24096, 803234000000L, 0.21987815399642535));
        listaP.add(creaOdometriaTAngolare( 24097, 803267000000L, 0.2198778041731839));
        listaP.add(creaOdometriaTAngolare( 24098, 803300000000L, 0.21987746260553273));
        listaP.add(creaOdometriaTAngolare( 24099, 803334000000L, 0.21987712010556637));
        listaP.add(creaOdometriaTAngolare( 24100, 803367000000L, 0.21987679759165848));
        listaP.add(creaOdometriaTAngolare( 24101, 803400000000L, 0.219876485612593));
        listaP.add(creaOdometriaTAngolare( 24102, 803434000000L, 0.21987617601187523));
        listaP.add(creaOdometriaTAngolare( 24103, 803467000000L, 0.2198758877962546));
        listaP.add(creaOdometriaTAngolare( 24104, 803500000000L, 0.219875612478028));
        listaP.add(creaOdometriaTAngolare( 24105, 803534000000L, 0.21987534311712104));
        listaP.add(creaOdometriaTAngolare( 24106, 803567000000L, 0.2198750847776948));
        listaP.add(creaOdometriaTAngolare( 24107, 803600000000L, 0.21987483701673874));
        listaP.add(creaOdometriaTAngolare( 24108, 803634000000L, 0.21987460887093707));
        listaP.add(creaOdometriaTAngolare( 24109, 803667000000L, 0.2198744142338175));
        listaP.add(creaOdometriaTAngolare( 24110, 803700000000L, 0.21987683266206773));
        listaP.add(creaOdometriaTAngolare( 24111, 803734000000L, 0.21991044469659998));
        listaP.add(creaOdometriaTAngolare( 24112, 803767000000L, 3.1828432198255355E-5));
        listaP.add(creaOdometriaTAngolare( 24113, 803800000000L, 1.0747580270976394E-5));
        listaP.add(creaOdometriaTAngolare( 24114, 803834000000L, 9.976210264531552E-6));
        listaP.add(creaOdometriaTAngolare( 24115, 803867000000L, 9.306731870642408E-6));
        listaP.add(creaOdometriaTAngolare( 24116, 803900000000L, 8.728395322817508E-6));
        listaP.add(creaOdometriaTAngolare( 24117, 803934000000L, 8.206066856167044E-6));
        listaP.add(creaOdometriaTAngolare( 24118, 803967000000L, 7.789493510834643E-6));
        listaP.add(creaOdometriaTAngolare( 24119, 804000000000L, 7.494673462510495E-6));
        assertMovimento(listaP,  false, 2, 3, 0.21988622, 0.00373806,0.00362917, (796634000000L-796600000000L)*1.0E-9D,(803800000000L-803734000000L)*1.0E-9D);
    }

    @Test
    public void testAngolare3(){
        System.out.println("TEST ANGOLARE 3: valori 'reali' turlebot3 comando gira a destra di 90Â°.");
        System.out.println("negativi");
        ArrayList<Odometry> listaN = new ArrayList<>();
        listaN.add(creaOdometriaTAngolare(103206, 3440234000000L, 9.82264794370155E-6));
        listaN.add(creaOdometriaTAngolare(103207, 3440267000000L, 9.822646228141029E-6));
        listaN.add(creaOdometriaTAngolare(103208, 3440300000000L, 9.822646044951416E-6));
        listaN.add(creaOdometriaTAngolare(103209, 3440334000000L, -0.22004204486542023));
        listaN.add(creaOdometriaTAngolare(103210, 3440362000000L, -0.2200229922904555));
        listaN.add(creaOdometriaTAngolare(103211, 3440400000000L, -0.21999536356295318));
        listaN.add(creaOdometriaTAngolare(103212, 3440434000000L, -0.2199806276141684));
        listaN.add(creaOdometriaTAngolare(103213, 3440467000000L, -0.21997808476508263));
        listaN.add(creaOdometriaTAngolare(103214, 3440500000000L, -0.219976055624429));
        listaN.add(creaOdometriaTAngolare(103215, 3440534000000L, -0.21997432190978009));
        listaN.add(creaOdometriaTAngolare(103216, 3440567000000L, -0.2199730531807768));
        listaN.add(creaOdometriaTAngolare(103217, 3440600000000L, -0.21997211020191615));
        listaN.add(creaOdometriaTAngolare(103218, 3440634000000L, -0.21997137931948882));
        listaN.add(creaOdometriaTAngolare(103219, 3440667000000L, -0.21997087004157745));
        listaN.add(creaOdometriaTAngolare(103220, 3440700000000L, -0.21997055439264665));
        listaN.add(creaOdometriaTAngolare(103221, 3440734000000L, -0.21997033359143447));
        listaN.add(creaOdometriaTAngolare(103222, 3440767000000L, -0.2199702791648225));
        listaN.add(creaOdometriaTAngolare(103223, 3440800000000L, -0.21997025933638797));
        listaN.add(creaOdometriaTAngolare(103224, 3440834000000L, -0.21997038411129904));
        listaN.add(creaOdometriaTAngolare(103225, 3440867000000L, -0.2199706277514347));
        listaN.add(creaOdometriaTAngolare(103226, 3440900000000L, -0.21997090084668672));
        listaN.add(creaOdometriaTAngolare(103227, 3440934000000L, -0.2199712143021136));
        listaN.add(creaOdometriaTAngolare(103228, 3440967000000L, -0.2199715203230114));
        listaN.add(creaOdometriaTAngolare(103229, 3441000000000L, -0.21997183587113625));
        listaN.add(creaOdometriaTAngolare(103230, 3441032000000L, -0.21997221308631157));
        listaN.add(creaOdometriaTAngolare(103231, 3441067000000L, -0.21997262365849143));
        listaN.add(creaOdometriaTAngolare(103232, 3441100000000L, -0.21997307271398384));
        listaN.add(creaOdometriaTAngolare(103233, 3441134000000L, -0.21997357042834853));
        listaN.add(creaOdometriaTAngolare(103234, 3441167000000L, -0.21997408290963033));
        listaN.add(creaOdometriaTAngolare(103235, 3441200000000L, -0.21997462015280722));
        listaN.add(creaOdometriaTAngolare(103236, 3441234000000L, -0.219975195556294));
        listaN.add(creaOdometriaTAngolare(103237, 3441267000000L, -0.21997577173036306));
        listaN.add(creaOdometriaTAngolare(103238, 3441300000000L, -0.21997636214736443));
        listaN.add(creaOdometriaTAngolare(103239, 3441334000000L, -0.21997698228302615));
        listaN.add(creaOdometriaTAngolare(103240, 3441367000000L, -0.2199775930834475));
        listaN.add(creaOdometriaTAngolare(103241, 3441400000000L, -0.21997821024089853));
        listaN.add(creaOdometriaTAngolare(103242, 3441434000000L, -0.21997885066397446));
        listaN.add(creaOdometriaTAngolare(103243, 3441467000000L, -0.21997947475280458));
        listaN.add(creaOdometriaTAngolare(103244, 3441500000000L, -0.21998009974454383));
        listaN.add(creaOdometriaTAngolare(103245, 3441534000000L, -0.21998074317978006));
        listaN.add(creaOdometriaTAngolare(103246, 3441567000000L, -0.21998136597974743));
        listaN.add(creaOdometriaTAngolare(103247, 3441600000000L, -0.21998198611548878));
        listaN.add(creaOdometriaTAngolare(103248, 3441634000000L, -0.21998262144115166));
        listaN.add(creaOdometriaTAngolare(103249, 3441667000000L, -0.21998323390201843));
        listaN.add(creaOdometriaTAngolare(103250, 3441700000000L, -0.21998384174051658));
        listaN.add(creaOdometriaTAngolare(103251, 3441734000000L, -0.21998441746805256));
        listaN.add(creaOdometriaTAngolare(103252, 3441767000000L, -0.2199848412454392));
        listaN.add(creaOdometriaTAngolare(103253, 3441800000000L, -0.21998527020095077));
        listaN.add(creaOdometriaTAngolare(103254, 3441834000000L, -0.21998570096846642));
        listaN.add(creaOdometriaTAngolare(103255, 3441867000000L, -0.21998610847130934));
        listaN.add(creaOdometriaTAngolare(103256, 3441900000000L, -0.21998650587535293));
        listaN.add(creaOdometriaTAngolare(103257, 3441934000000L, -0.2199869051788044));
        listaN.add(creaOdometriaTAngolare(103258, 3441967000000L, -0.21998728335304177));
        listaN.add(creaOdometriaTAngolare(103259, 3442000000000L, -0.21998765282238691));
        listaN.add(creaOdometriaTAngolare(103260, 3442034000000L, -0.21998802489721903));
        listaN.add(creaOdometriaTAngolare(103261, 3442067000000L, -0.21998837824234874));
        listaN.add(creaOdometriaTAngolare(103262, 3442100000000L, -0.21998872448729692));
        listaN.add(creaOdometriaTAngolare(103263, 3442134000000L, -0.2199890744001999));
        listaN.add(creaOdometriaTAngolare(103264, 3442167000000L, -0.21998940799889888));
        listaN.add(creaOdometriaTAngolare(103265, 3442200000000L, -0.21998973624518908));
        listaN.add(creaOdometriaTAngolare(103266, 3442234000000L, -0.21999006941002053));
        listaN.add(creaOdometriaTAngolare(103267, 3442267000000L, -0.21999038845348592));
        listaN.add(creaOdometriaTAngolare(103268, 3442300000000L, -0.21999070377118582));
        listaN.add(creaOdometriaTAngolare(103269, 3442334000000L, -0.21999102528141024));
        listaN.add(creaOdometriaTAngolare(103270, 3442367000000L, -0.2199913346044999));
        listaN.add(creaOdometriaTAngolare(103271, 3442400000000L, -0.21999164165735807));
        listaN.add(creaOdometriaTAngolare(103272, 3442434000000L, -0.21999195608807956));
        listaN.add(creaOdometriaTAngolare(103273, 3442467000000L, -0.21999225980489703));
        listaN.add(creaOdometriaTAngolare(103274, 3442500000000L, -0.2199925624679311));
        listaN.add(creaOdometriaTAngolare(103275, 3442534000000L, -0.21999287355921335));
        listaN.add(creaOdometriaTAngolare(103276, 3442567000000L, -0.21999317506067514));
        listaN.add(creaOdometriaTAngolare(103277, 3442600000000L, -0.21999347639965766));
        listaN.add(creaOdometriaTAngolare(103278, 3442633000000L, -0.21999378697022295));
        listaN.add(creaOdometriaTAngolare(103279, 3442667000000L, -0.21999408874204687));
        listaN.add(creaOdometriaTAngolare(103280, 3442700000000L, -0.21999439098650528));
        listaN.add(creaOdometriaTAngolare(103281, 3442734000000L, -0.21999470304346597));
        listaN.add(creaOdometriaTAngolare(103282, 3442767000000L, -0.2199950066979069));
        listaN.add(creaOdometriaTAngolare(103283, 3442800000000L, -0.21999531129220987));
        listaN.add(creaOdometriaTAngolare(103284, 3442834000000L, -0.21999562610278156));
        listaN.add(creaOdometriaTAngolare(103285, 3442867000000L, -0.2199959326417165));
        listaN.add(creaOdometriaTAngolare(103286, 3442900000000L, -0.21999624018705993));
        listaN.add(creaOdometriaTAngolare(103287, 3442934000000L, -0.21999655815250255));
        listaN.add(creaOdometriaTAngolare(103288, 3442967000000L, -0.21999686777880534));
        listaN.add(creaOdometriaTAngolare(103289, 3443000000000L, -0.21999717836812285));
        listaN.add(creaOdometriaTAngolare(103290, 3443034000000L, -0.21999749933102133));
        listaN.add(creaOdometriaTAngolare(103291, 3443067000000L, -0.21999781176420946));
        listaN.add(creaOdometriaTAngolare(103292, 3443100000000L, -0.21999812498597562));
        listaN.add(creaOdometriaTAngolare(103293, 3443134000000L, -0.21999844842346078));
        listaN.add(creaOdometriaTAngolare(103294, 3443167000000L, -0.21999876295065918));
        listaN.add(creaOdometriaTAngolare(103295, 3443200000000L, -0.21999907797450566));
        listaN.add(creaOdometriaTAngolare(103296, 3443234000000L, -0.2199994029595002));
        listaN.add(creaOdometriaTAngolare(103297, 3443267000000L, -0.219999718628726));
        listaN.add(creaOdometriaTAngolare(103298, 3443300000000L, -0.22000003440025265));
        listaN.add(creaOdometriaTAngolare(103299, 3443334000000L, -0.22000035970564844));
        listaN.add(creaOdometriaTAngolare(103300, 3443367000000L, -0.2200006752735475));
        listaN.add(creaOdometriaTAngolare(103301, 3443400000000L, -0.22000099053829325));
        listaN.add(creaOdometriaTAngolare(103302, 3443434000000L, -0.22000131485102795));
        listaN.add(creaOdometriaTAngolare(103303, 3443467000000L, -0.22000162897496786));
        listaN.add(creaOdometriaTAngolare(103304, 3443500000000L, -0.22000194230100334));
        listaN.add(creaOdometriaTAngolare(103305, 3443534000000L, -0.22000226416262555));
        listaN.add(creaOdometriaTAngolare(103306, 3443567000000L, -0.22000257544498503));
        listaN.add(creaOdometriaTAngolare(103307, 3443600000000L, -0.22000288545605626));
        listaN.add(creaOdometriaTAngolare(103308, 3443633000000L, -0.22000320334616089));
        listaN.add(creaOdometriaTAngolare(103309, 3443667000000L, -0.22000351025003276));
        listaN.add(creaOdometriaTAngolare(103310, 3443700000000L, -0.2200038153792202));
        listaN.add(creaOdometriaTAngolare(103311, 3443734000000L, -0.22000412773008193));
        listaN.add(creaOdometriaTAngolare(103312, 3443766000000L, -0.22000442876578447));
        listaN.add(creaOdometriaTAngolare(103313, 3443800000000L, -0.220004727551892));
        listaN.add(creaOdometriaTAngolare(103314, 3443834000000L, -0.22000503288759665));
        listaN.add(creaOdometriaTAngolare(103315, 3443867000000L, -0.22000532663563746));
        listaN.add(creaOdometriaTAngolare(103316, 3443900000000L, -0.22000561766199336));
        listaN.add(creaOdometriaTAngolare(103317, 3443934000000L, -0.22000591450432994));
        listaN.add(creaOdometriaTAngolare(103318, 3443967000000L, -0.22000619955143347));
        listaN.add(creaOdometriaTAngolare(103319, 3444000000000L, -0.22000648143648843));
        listaN.add(creaOdometriaTAngolare(103320, 3444034000000L, -0.22000676840802671));
        listaN.add(creaOdometriaTAngolare(103321, 3444067000000L, -0.2200070434483885));
        listaN.add(creaOdometriaTAngolare(103322, 3444100000000L, -0.22000731491505635));
        listaN.add(creaOdometriaTAngolare(103323, 3444134000000L, -0.2200075907342518));
        listaN.add(creaOdometriaTAngolare(103324, 3444167000000L, -0.22000785455665064));
        listaN.add(creaOdometriaTAngolare(103325, 3444200000000L, -0.2200081144304908));
        listaN.add(creaOdometriaTAngolare(103326, 3444234000000L, -0.22000837792766764));
        listaN.add(creaOdometriaTAngolare(103327, 3444267000000L, -0.2200086294378007));
        listaN.add(creaOdometriaTAngolare(103328, 3444300000000L, -0.22000887666565302));
        listaN.add(creaOdometriaTAngolare(103329, 3444334000000L, -0.2200091268019425));
        listaN.add(creaOdometriaTAngolare(103330, 3444367000000L, -0.22000936503677485));
        listaN.add(creaOdometriaTAngolare(103331, 3444400000000L, -0.2200095987046429));
        listaN.add(creaOdometriaTAngolare(103332, 3444433000000L, -0.22000983458914103));
        listaN.add(creaOdometriaTAngolare(103333, 3444467000000L, -0.2200100587362505));
        listaN.add(creaOdometriaTAngolare(103334, 3444500000000L, -0.2200102780854235));
        listaN.add(creaOdometriaTAngolare(103335, 3444534000000L, -0.22001049899501693));
        listaN.add(creaOdometriaTAngolare(103336, 3444567000000L, -0.22001070841175605));
        listaN.add(creaOdometriaTAngolare(103337, 3444600000000L, -0.2200109128579977));
        listaN.add(creaOdometriaTAngolare(103338, 3444634000000L, -0.22001111825381162));
        listaN.add(creaOdometriaTAngolare(103339, 3444667000000L, -0.22001131248297856));
        listaN.add(creaOdometriaTAngolare(103340, 3444700000000L, -0.22001150163452596));
        listaN.add(creaOdometriaTAngolare(103341, 3444734000000L, -0.22001169118674305));
        listaN.add(creaOdometriaTAngolare(103342, 3444767000000L, -0.22001186997756156));
        listaN.add(creaOdometriaTAngolare(103343, 3444800000000L, -0.22001204365713845));
        listaN.add(creaOdometriaTAngolare(103344, 3444834000000L, -0.220012217260152));
        listaN.add(creaOdometriaTAngolare(103345, 3444867000000L, -0.22001238058940922));
        listaN.add(creaOdometriaTAngolare(103346, 3444900000000L, -0.22001253885210012));
        listaN.add(creaOdometriaTAngolare(103347, 3444934000000L, -0.22001269665215234));
        listaN.add(creaOdometriaTAngolare(103348, 3444967000000L, -0.22001284476667762));
        listaN.add(creaOdometriaTAngolare(103349, 3445000000000L, -0.2200129879470639));
        listaN.add(creaOdometriaTAngolare(103350, 3445034000000L, -0.22001313037186102));
        listaN.add(creaOdometriaTAngolare(103351, 3445067000000L, -0.22001326373898078));
        listaN.add(creaOdometriaTAngolare(103352, 3445100000000L, -0.22001339239485898));
        listaN.add(creaOdometriaTAngolare(103353, 3445134000000L, -0.22001352012309042));
        listaN.add(creaOdometriaTAngolare(103354, 3445167000000L, -0.22001363951764083));
        listaN.add(creaOdometriaTAngolare(103355, 3445200000000L, -0.22001375453127978));
        listaN.add(creaOdometriaTAngolare(103356, 3445234000000L, -0.2200138685983442));
        listaN.add(creaOdometriaTAngolare(103357, 3445267000000L, -0.22001397513165327));
        listaN.add(creaOdometriaTAngolare(103358, 3445300000000L, -0.22001407770067824));
        listaN.add(creaOdometriaTAngolare(103359, 3445334000000L, -0.22001417940419274));
        listaN.add(creaOdometriaTAngolare(103360, 3445367000000L, -0.22001427444100755));
        listaN.add(creaOdometriaTAngolare(103361, 3445400000000L, -0.22001436604494173));
        listaN.add(creaOdometriaTAngolare(103362, 3445434000000L, -0.22001445708158446));
        listaN.add(creaOdometriaTAngolare(103363, 3445467000000L, -0.2200145423863504));
        listaN.add(creaOdometriaTAngolare(103364, 3445500000000L, -0.22001462490387638));
        listaN.add(creaOdometriaTAngolare(103365, 3445534000000L, -0.22001470725587674));
        listaN.add(creaOdometriaTAngolare(103366, 3445567000000L, -0.2200147848558724));
        listaN.add(creaOdometriaTAngolare(103367, 3445600000000L, -0.22001486043202456));
        listaN.add(creaOdometriaTAngolare(103368, 3445634000000L, -0.2200149364964675));
        listaN.add(creaOdometriaTAngolare(103369, 3445667000000L, -0.220015008837355));
        listaN.add(creaOdometriaTAngolare(103370, 3445700000000L, -0.2200150800423422));
        listaN.add(creaOdometriaTAngolare(103371, 3445734000000L, -0.22001515253128223));
        listaN.add(creaOdometriaTAngolare(103372, 3445767000000L, -0.2200152223554447));
        listaN.add(creaOdometriaTAngolare(103373, 3445799000000L, -0.22001529202362655));
        listaN.add(creaOdometriaTAngolare(103374, 3445834000000L, -0.22001536397769114));
        listaN.add(creaOdometriaTAngolare(103375, 3445867000000L, -0.22001543434054913));
        listaN.add(creaOdometriaTAngolare(103376, 3445900000000L, -0.22001550558860541));
        listaN.add(creaOdometriaTAngolare(103377, 3445934000000L, -0.22001558031727042));
        listaN.add(creaOdometriaTAngolare(103378, 3445967000000L, -0.22001565454895722));
        listaN.add(creaOdometriaTAngolare(103379, 3446000000000L, -0.22001573084865791));
        listaN.add(creaOdometriaTAngolare(103380, 3446034000000L, -0.22001581202612686));
        listaN.add(creaOdometriaTAngolare(103381, 3446066000000L, -0.22001589372657987));
        listaN.add(creaOdometriaTAngolare(103382, 3446100000000L, -0.22001597871247056));
        listaN.add(creaOdometriaTAngolare(103383, 3446134000000L, -0.22001607016929894));
        listaN.add(creaOdometriaTAngolare(103384, 3446167000000L, -0.22001616316723902));
        listaN.add(creaOdometriaTAngolare(103385, 3446200000000L, -0.22001626074166503));
        listaN.add(creaOdometriaTAngolare(103386, 3446234000000L, -0.2200163665159322));
        listaN.add(creaOdometriaTAngolare(103387, 3446267000000L, -0.22001647471398214));
        listaN.add(creaOdometriaTAngolare(103388, 3446300000000L, -0.22001658880581798));
        listaN.add(creaOdometriaTAngolare(103389, 3446334000000L, -0.22001671301389544));
        listaN.add(creaOdometriaTAngolare(103390, 3446367000000L, -0.2200168404453721));
        listaN.add(creaOdometriaTAngolare(103391, 3446400000000L, -0.22001697508270346));
        listaN.add(creaOdometriaTAngolare(103392, 3446434000000L, -0.22001712178591));
        listaN.add(creaOdometriaTAngolare(103393, 3446467000000L, -0.22001727235787918));
        listaN.add(creaOdometriaTAngolare(103394, 3446500000000L, -0.220017431413084));
        listaN.add(creaOdometriaTAngolare(103395, 3446534000000L, -0.22001760461042902));
        listaN.add(creaOdometriaTAngolare(103396, 3446567000000L, -0.22001778213633744));
        listaN.add(creaOdometriaTAngolare(103397, 3446600000000L, -0.22001796932934511));
        listaN.add(creaOdometriaTAngolare(103398, 3446634000000L, -0.22001817269279705));
        listaN.add(creaOdometriaTAngolare(103399, 3446667000000L, -0.2200183806233922));
        listaN.add(creaOdometriaTAngolare(103400, 3446700000000L, -2.5810400972552218E-5));
        listaN.add(creaOdometriaTAngolare(103401, 3446734000000L, 2.4251123637981193E-6));
        listaN.add(creaOdometriaTAngolare(103402, 3446767000000L, 6.575774344661477E-6));
        listaN.add(creaOdometriaTAngolare(103403, 3446800000000L, 7.249142162085657E-6));
        listaN.add(creaOdometriaTAngolare(103404, 3446834000000L, 7.401611654919031E-6));
        listaN.add(creaOdometriaTAngolare(103405, 3446867000000L, 7.494868339373661E-6));
        listaN.add(creaOdometriaTAngolare(103406, 3446900000000L, 7.612942088335161E-6));
        listaN.add(creaOdometriaTAngolare(103407, 3446934000000L, 7.864888363341444E-6));
        assertMovimento(listaN,  false, 2, 3, 0.2199992721762304, (0.2199992721762304)*0.017,0.003630853, (3440334000000L-3440300000000L)*1.0E-9D, (3446734000000L-3446667000000L)*1.0E-9D);
    }

    private void assertMovimento(ArrayList<Odometry> lista, boolean isLineare , int dimAspettataTabA, int dimAspettataTabF, double velRegimeAspettata, double spazioAccAspettato, double spazioFreAspettato, double secondiAccAspettati, double secondiFreAspettati){
        Movimento movimento = tempiPerTimer.inizializzaMovimento(lista, isLineare);
        Assert.assertEquals(dimAspettataTabA, movimento.getDimensioneTabAccelerazione());
        Assert.assertEquals(dimAspettataTabF, movimento.getDimensioneTabFrenata());
        Assert.assertEquals(velRegimeAspettata, movimento.getVelRegime(), deltaDouble);
        Assert.assertEquals(spazioAccAspettato, movimento.getPercorsiTotaliAccelerazione(), deltaDouble);
        Assert.assertEquals(spazioFreAspettato, movimento.getPercorsiTotaliFrenata(), deltaDouble);
        Assert.assertEquals(secondiAccAspettati, movimento.getSecondiTotaliAccelerazione(), deltaDouble);
        Assert.assertEquals(secondiFreAspettati, movimento.getSecondiTotaliFrenata(), deltaDouble);
    }

    private Odometry creaOdometriaTLinare(int seq, long tempo, double xL){
        return creaOdometriaTLinare(seq,tempo*1.0E-9D,  xL);
    }

    private Odometry creaOdometriaTLinare(int seq, double tempo, double xL){
        Time time = new Time(tempo);
        Header header = new HeaderT(time, seq);
        Vector3 lineare = new Vector3T(xL, 0, 0);
        Twist twist = new TwistT(lineare, null);
        TwistWithCovariance twistWithCovariance = new TwistWithCovarianceT(twist);
        return new OdometriaT(header, twistWithCovariance, null);
    }

    private Odometry creaOdometriaTAngolare(int seq, long tempo, double xA){
        return creaOdometriaTAngolare(seq, tempo*1.0E-9D, xA);
    }

    private Odometry creaOdometriaTAngolare(int seq, double tempo, double zA){
        Time time = new Time(tempo);
        Header header = new HeaderT(time, seq);

        Vector3 angolare = new Vector3T(0, 0, zA);
        Twist twist = new TwistT(null, angolare);
        TwistWithCovariance twistWithCovariance = new TwistWithCovarianceT(twist);

        return new OdometriaT(header, twistWithCovariance, null);
    }

    private Odometry creaOdometriaCompletoT(double tempo, int seq, double xL, double yL, double zL, double xA, double yA, double zA, double xP, double yP, double zP, double xQ, double yQ, double zQ, double wQ){
        Time time = new Time(tempo);
        Header header = new HeaderT(time, seq);

        Vector3 lineare = new Vector3T(xL, yL, zL);
        Vector3 angolare = new Vector3T(xA, yA, zA);
        Twist twist = new TwistT(lineare, angolare);
        TwistWithCovariance twistWithCovariance = new TwistWithCovarianceT(twist);

        Point point = new PointT(xP, yP, zP);
        Quaternion quaternion = new QuaternionT(xQ, yQ, zQ, wQ);
        Pose pose = new PoseT(point, quaternion);

        PoseWithCovariance poseWithCovariance = new PoseWithCovarianceT(pose);

        return new OdometriaT(header, twistWithCovariance, poseWithCovariance);
    }

}
